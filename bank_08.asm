.include "Constants.inc"
.include "variables.inc"
.include "macros.inc"
.feature force_range

.export lut_Domains
.export lut_BattleFormations
.export WriteAttributesToPPU
.export lut_BattlePalettes
.export BeginBattleSetup
.export lut_EnemyCHR_Assignment

.import Battle_ReadPPUData_L
.import Battle_WritePPUData_L
.import CallMusicPlay_L
.import WaitForVBlank_L
.import BattleCrossPageJump_L
.import LongCall
.import RandAX
.import MultiplyXA
.import BackupMapMusic
.import SetPPUAddr_XA
.import ShiftLeft6
.import LoadBorderPalette_Grey
.import JigsBox_Start
.import LoadEnemyGraphicsFromBank

.import CHRLoad
.import BattleRNG_L
.import MultiplyXA

.segment "BANK_08"

BANK_THIS = $08

;; JIGS -
;; Each row is 8 bytes long; each domain tile contains 8 different battle types, chosen by lut_FormationWeight.
;; So while there are 32x32 domain tiles in vanilla FF1, this table is only 32x2 ?
;; the first 8 rows are the top 8 columns of the world map...


;lut_Domains:
;.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; 1 1
;.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; 2
;.byte $89,$70,$3C,$60,$3C,$39,$39,$3A ; 3
;.byte $EF,$60,$67,$39,$67,$3A,$B7,$B1 ; 4
;.byte $EF,$60,$67,$39,$67,$3A,$B7,$B1 ; 5
;.byte $89,$70,$3C,$60,$3C,$39,$39,$3A ; 6
;.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; 7
;.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; 8
;
;.byte $71,$99,$71,$99,$A2,$A2,$B7,$B1 ; 1 2
;.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; 2
;.byte $37,$37,$25,$25,$36,$36,$38,$B7 ; 3
;.byte $EF,$60,$67,$39,$67,$3A,$B7,$B1 ; 4
;.byte $EF,$60,$67,$39,$67,$3A,$B7,$B1 ; 5
;.byte $F1,$BD,$F1,$BD,$B8,$B8,$BC,$3E ; 6
;.byte $F1,$BD,$F1,$BD,$B8,$B8,$BC,$3E ; 7
;.byte $B2,$9E,$B2,$9E,$AD,$AD,$3D,$F0 ; 8
;
;.byte $71,$99,$71,$99,$A2,$A2,$B7,$B1 ; 1 3
;.byte $71,$99,$71,$99,$A2,$A2,$B7,$B1 ; 2
;.byte $00,$00,$00,$00,$00,$00,$00,$00 ; 3
;.byte $37,$37,$25,$25,$36,$36,$38,$B7 ; 4
;.byte $00,$00,$00,$00,$00,$00,$00,$00 ; 5
;.byte $F1,$BD,$F1,$BD,$B8,$B8,$BC,$3E ; 6
;.byte $F1,$BD,$F1,$BD,$B8,$B8,$BC,$3E ; 7
;.byte $B2,$9E,$B2,$9E,$AD,$AD,$3D,$F0 ; 8
;
;.byte $00,$00,$00,$00,$00,$00,$00,$00 ; 1 4
;.byte $00,$00,$00,$00,$00,$00,$00,$00 ; 2
;.byte $00,$00,$00,$00,$00,$00,$00,$00 ; 3
;.byte $01,$05,$82,$00,$06,$07,$80,$86 ; 4
;.byte $01,$05,$82,$00,$06,$07,$80,$86 ; 5
;.byte $83,$0D,$87,$0C,$87,$0B,$0B,$13 ; 6
;.byte $00,$00,$00,$00,$00,$00,$00,$00 ; 7
;.byte $B2,$9E,$B2,$9E,$AD,$AD,$3D,$F0 ; 8
;
;.byte $00,$00,$00,$00,$00,$00,$00,$00 ; 1 5
;.byte $88,$8A,$13,$8A,$8C,$8B,$19,$E6 ; 2
;.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; 3
;.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; 4
;.byte $00,$00,$00,$00,$82,$03,$06,$80 ; 5
;.byte $09,$07,$02,$86,$83,$83,$0C,$87 ; 6
;.byte $09,$07,$02,$86,$83,$83,$0C,$87 ; 7
;.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; 8
;
;.byte $88,$8A,$13,$8A,$8C,$8B,$19,$E6 ; 1 6
;.byte $88,$8A,$13,$8A,$8C,$8B,$19,$E6 ; 2
;.byte $88,$8A,$13,$8A,$8C,$8B,$19,$E6 ; 3
;.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; 4
;.byte $00,$00,$00,$00,$00,$00,$00,$00 ; 5
;.byte $0D,$14,$83,$8E,$0C,$0C,$0B,$11 ; 6
;.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; 7
;.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; 8
;
;.byte $00,$00,$00,$00,$00,$00,$00,$00 ; 1 7
;.byte $00,$00,$00,$00,$00,$00,$00,$00 ; 2
;.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; 3
;.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; 4
;.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; 5
;.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; 6
;.byte $17,$63,$95,$1E,$95,$9B,$9B,$9A ; 7
;.byte $17,$63,$95,$1E,$95,$9B,$9B,$9A ; 8
;
;.byte $00,$00,$00,$00,$00,$00,$00,$00 ; 1 8
;.byte $00,$00,$00,$00,$00,$00,$00,$00 ; 2
;.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; 3
;.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; 4
;.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; 5
;.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; 6
;.byte $17,$63,$95,$1E,$95,$9B,$9B,$9A ; 7
;.byte $17,$63,$95,$1E,$95,$9B,$9B,$9A ; 8

;; JIGS - so to make each domain be an 8x8 grid ...
;; first double each row of the 8 blocks, so there are 16 rows
;; then duplicate each new block, so there are 16 blocks

lut_Domains:
.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; $8000 0 <-ROW
.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; $8008 1
.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; $8010 2
.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; $8018 3
.byte $89,$70,$3C,$60,$3C,$39,$39,$3A ; $8020 4
.byte $89,$70,$3C,$60,$3C,$39,$39,$3A ; $8028 5
.byte $EF,$60,$67,$39,$67,$3A,$B7,$B1 ; $8030 6
.byte $EF,$60,$67,$39,$67,$3A,$B7,$B1 ; $8038 7
.byte $EF,$60,$67,$39,$67,$3A,$B7,$B1 ; $8040 8
.byte $EF,$60,$67,$39,$67,$3A,$B7,$B1 ; $8048 9
.byte $89,$70,$3C,$60,$3C,$39,$39,$3A ; $8050 A
.byte $89,$70,$3C,$60,$3C,$39,$39,$3A ; $8058 B
.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; $8060 C
.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; $8068 D
.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; $8070 E
.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; $8078 F

.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; $8080 0
.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; $8088 1 <-ROW
.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; $8090 2
.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; $8098 3
.byte $89,$70,$3C,$60,$3C,$39,$39,$3A ; $80A0 4
.byte $89,$70,$3C,$60,$3C,$39,$39,$3A ; $80A8 5
.byte $EF,$60,$67,$39,$67,$3A,$B7,$B1 ; $80B0 6
.byte $EF,$60,$67,$39,$67,$3A,$B7,$B1 ; $80B8 7
.byte $EF,$60,$67,$39,$67,$3A,$B7,$B1 ; $80C0 8
.byte $EF,$60,$67,$39,$67,$3A,$B7,$B1 ; $80C8 9
.byte $89,$70,$3C,$60,$3C,$39,$39,$3A ; $80D0 A
.byte $89,$70,$3C,$60,$3C,$39,$39,$3A ; $80D8 B
.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; $80E0 C
.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; $80E8 D
.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; $80F0 E
.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; $80F8 F

.byte $71,$99,$71,$99,$A2,$A2,$B7,$B1 ; $8100 0
.byte $71,$99,$71,$99,$A2,$A2,$B7,$B1 ; $8108 1
.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; $8110 2 <-ROW
.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; $8118 3
.byte $37,$37,$25,$25,$36,$36,$38,$B7 ; $8120 4
.byte $37,$37,$25,$25,$36,$36,$38,$B7 ; $8128 5
.byte $EF,$60,$67,$39,$67,$3A,$B7,$B1 ; $8130 6
.byte $EF,$60,$67,$39,$67,$3A,$B7,$B1 ; $8138 7
.byte $EF,$60,$67,$39,$67,$3A,$B7,$B1 ; $8140 8
.byte $EF,$60,$67,$39,$67,$3A,$B7,$B1 ; $8148 9
.byte $F1,$BD,$F1,$BD,$B8,$B8,$BC,$3E ; $8150 A
.byte $F1,$BD,$F1,$BD,$B8,$B8,$BC,$3E ; $8158 B
.byte $F1,$BD,$F1,$BD,$B8,$B8,$BC,$3E ; $8160 C
.byte $F1,$BD,$F1,$BD,$B8,$B8,$BC,$3E ; $8168 D
.byte $B2,$9E,$B2,$9E,$AD,$AD,$3D,$F0 ; $8170 E
.byte $B2,$9E,$B2,$9E,$AD,$AD,$3D,$F0 ; $8178 F

.byte $71,$99,$71,$99,$A2,$A2,$B7,$B1 ; $8180 0
.byte $71,$99,$71,$99,$A2,$A2,$B7,$B1 ; $8188 1
.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; $8190 2
.byte $E3,$31,$70,$2E,$70,$60,$36,$9F ; $8198 3 <-ROW
.byte $37,$37,$25,$25,$36,$36,$38,$B7 ; $81A0 4
.byte $37,$37,$25,$25,$36,$36,$38,$B7 ; $81A8 5
.byte $EF,$60,$67,$39,$67,$3A,$B7,$B1 ; $81B0 6
.byte $EF,$60,$67,$39,$67,$3A,$B7,$B1 ; $81B8 7
.byte $EF,$60,$67,$39,$67,$3A,$B7,$B1 ; $81C0 8
.byte $EF,$60,$67,$39,$67,$3A,$B7,$B1 ; $81C8 9
.byte $F1,$BD,$F1,$BD,$B8,$B8,$BC,$3E ; $81D0 A
.byte $F1,$BD,$F1,$BD,$B8,$B8,$BC,$3E ; $81D8 B
.byte $F1,$BD,$F1,$BD,$B8,$B8,$BC,$3E ; $81E0 C
.byte $F1,$BD,$F1,$BD,$B8,$B8,$BC,$3E ; $81E8 D
.byte $B2,$9E,$B2,$9E,$AD,$AD,$3D,$F0 ; $81F0 E
.byte $B2,$9E,$B2,$9E,$AD,$AD,$3D,$F0 ; $81F8 F

.byte $71,$99,$71,$99,$A2,$A2,$B7,$B1 ; $8200 0
.byte $71,$99,$71,$99,$A2,$A2,$B7,$B1 ; $8208 1
.byte $71,$99,$71,$99,$A2,$A2,$B7,$B1 ; $8210 2
.byte $71,$99,$71,$99,$A2,$A2,$B7,$B1 ; $8218 3
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8220 4 <-ROW
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8228 5
.byte $37,$37,$25,$25,$36,$36,$38,$B7 ; $8230 6
.byte $37,$37,$25,$25,$36,$36,$38,$B7 ; $8238 7
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8240 8
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8248 9
.byte $F1,$BD,$F1,$BD,$B8,$B8,$BC,$3E ; $8250 A
.byte $F1,$BD,$F1,$BD,$B8,$B8,$BC,$3E ; $8258 B
.byte $F1,$BD,$F1,$BD,$B8,$B8,$BC,$3E ; $8260 C
.byte $F1,$BD,$F1,$BD,$B8,$B8,$BC,$3E ; $8268 D
.byte $B2,$9E,$B2,$9E,$AD,$AD,$3D,$F0 ; $8270 E
.byte $B2,$9E,$B2,$9E,$AD,$AD,$3D,$F0 ; $8278 F

.byte $71,$99,$71,$99,$A2,$A2,$B7,$B1 ; $8280 0
.byte $71,$99,$71,$99,$A2,$A2,$B7,$B1 ; $8288 1
.byte $71,$99,$71,$99,$A2,$A2,$B7,$B1 ; $8290 2
.byte $71,$99,$71,$99,$A2,$A2,$B7,$B1 ; $8298 3
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $82A0 4
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $82A8 5 <-ROW
.byte $37,$37,$25,$25,$36,$36,$38,$B7 ; $82B0 6
.byte $37,$37,$25,$25,$36,$36,$38,$B7 ; $82B8 7
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $82C0 8
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $82C8 9
.byte $F1,$BD,$F1,$BD,$B8,$B8,$BC,$3E ; $82D0 A
.byte $F1,$BD,$F1,$BD,$B8,$B8,$BC,$3E ; $82D8 B
.byte $F1,$BD,$F1,$BD,$B8,$B8,$BC,$3E ; $82E0 C
.byte $F1,$BD,$F1,$BD,$B8,$B8,$BC,$3E ; $82E8 D
.byte $B2,$9E,$B2,$9E,$AD,$AD,$3D,$F0 ; $82F0 E
.byte $B2,$9E,$B2,$9E,$AD,$AD,$3D,$F0 ; $82F8 F

.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8300 0
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8308 1
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8310 2
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8318 3
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8320 4
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8328 5
.byte $01,$05,$82,$00,$06,$07,$80,$86 ; $8330 6 <-ROW
.byte $01,$05,$82,$00,$06,$07,$80,$86 ; $8338 7
.byte $01,$05,$82,$00,$06,$07,$80,$86 ; $8340 8
.byte $01,$05,$82,$00,$06,$07,$80,$86 ; $8348 9
.byte $83,$0D,$87,$0C,$87,$0B,$0B,$13 ; $8350 A
.byte $83,$0D,$87,$0C,$87,$0B,$0B,$13 ; $8358 B
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8360 C
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8368 D
.byte $B2,$9E,$B2,$9E,$AD,$AD,$3D,$F0 ; $8370 E
.byte $B2,$9E,$B2,$9E,$AD,$AD,$3D,$F0 ; $8378 F

.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8380 0
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8388 1
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8390 2
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8398 3
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $83A0 4
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $83A8 5
.byte $01,$05,$82,$00,$06,$07,$80,$86 ; $83B0 6
.byte $01,$05,$82,$00,$06,$07,$80,$86 ; $83B8 7 <-ROW
.byte $01,$05,$82,$00,$06,$07,$80,$86 ; $83C0 8
.byte $01,$05,$82,$00,$06,$07,$80,$86 ; $83C8 9
.byte $83,$0D,$87,$0C,$87,$0B,$0B,$13 ; $83D0 A
.byte $83,$0D,$87,$0C,$87,$0B,$0B,$13 ; $83D8 B
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $83E0 C
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $83E8 D
.byte $B2,$9E,$B2,$9E,$AD,$AD,$3D,$F0 ; $83F0 E
.byte $B2,$9E,$B2,$9E,$AD,$AD,$3D,$F0 ; $83F8 F

;; Y and X are both under $7F here?

.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8400 0
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8408 1
.byte $88,$8A,$13,$8A,$8C,$8B,$19,$E6 ; $8410 2
.byte $88,$8A,$13,$8A,$8C,$8B,$19,$E6 ; $8418 3
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $8420 4
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $8428 5
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $8430 6
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $8438 7
.byte $00,$00,$00,$00,$82,$03,$06,$80 ; $8440 8 <-ROW
.byte $00,$00,$00,$00,$82,$03,$06,$80 ; $8448 9
.byte $09,$07,$02,$86,$83,$83,$0C,$87 ; $8450 A
.byte $09,$07,$02,$86,$83,$83,$0C,$87 ; $8458 B
.byte $09,$07,$02,$86,$83,$83,$0C,$87 ; $8460 C
.byte $09,$07,$02,$86,$83,$83,$0C,$87 ; $8468 D
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $8470 E
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $8478 F

.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8480 0
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8488 1
.byte $88,$8A,$13,$8A,$8C,$8B,$19,$E6 ; $8490 2
.byte $88,$8A,$13,$8A,$8C,$8B,$19,$E6 ; $8498 3
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $84A0 4
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $84A8 5
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $84B0 6
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $84B8 7
.byte $00,$00,$00,$00,$82,$03,$06,$80 ; $84C0 8
.byte $00,$00,$00,$00,$82,$03,$06,$80 ; $84C8 9 <-ROW
.byte $09,$07,$02,$86,$83,$83,$0C,$87 ; $84D0 A
.byte $09,$07,$02,$86,$83,$83,$0C,$87 ; $84D8 B
.byte $09,$07,$02,$86,$83,$83,$0C,$87 ; $84E0 C
.byte $09,$07,$02,$86,$83,$83,$0C,$87 ; $84E8 D
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $84F0 E
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $84F8 F

.byte $88,$8A,$13,$8A,$8C,$8B,$19,$E6 ; $8500 0
.byte $88,$8A,$13,$8A,$8C,$8B,$19,$E6 ; $8508 1
.byte $88,$8A,$13,$8A,$8C,$8B,$19,$E6 ; $8510 2
.byte $88,$8A,$13,$8A,$8C,$8B,$19,$E6 ; $8518 3
.byte $88,$8A,$13,$8A,$8C,$8B,$19,$E6 ; $8520 4
.byte $88,$8A,$13,$8A,$8C,$8B,$19,$E6 ; $8528 5
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $8530 6
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $8538 7
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8540 8
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8548 9
.byte $0D,$14,$83,$8E,$0C,$0C,$0B,$11 ; $8550 A <-ROW
.byte $0D,$14,$83,$8E,$0C,$0C,$0B,$11 ; $8558 B
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $8560 C
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $8568 D
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $8570 E
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $8578 F

.byte $88,$8A,$13,$8A,$8C,$8B,$19,$E6 ; $8580 0
.byte $88,$8A,$13,$8A,$8C,$8B,$19,$E6 ; $8588 1
.byte $88,$8A,$13,$8A,$8C,$8B,$19,$E6 ; $8590 2
.byte $88,$8A,$13,$8A,$8C,$8B,$19,$E6 ; $8598 3
.byte $88,$8A,$13,$8A,$8C,$8B,$19,$E6 ; $85A0 4
.byte $88,$8A,$13,$8A,$8C,$8B,$19,$E6 ; $85A8 5
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $85B0 6
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $85B8 7
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $85C0 8
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $85C8 9
.byte $0D,$14,$83,$8E,$0C,$0C,$0B,$11 ; $85D0 A
.byte $0D,$14,$83,$8E,$0C,$0C,$0B,$11 ; $85D8 B <-ROW
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $85E0 C
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $85E8 D
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $85F0 E
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $85F8 F

.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8600 0
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8608 1
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8610 2
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8618 3
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $8620 4
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $8628 5
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $8630 6
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $8638 7
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $8640 8
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $8648 9
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $8650 A
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $8658 B
.byte $17,$63,$95,$1E,$95,$9B,$9B,$9A ; $8660 C <-ROW
.byte $17,$63,$95,$1E,$95,$9B,$9B,$9A ; $8668 D
.byte $17,$63,$95,$1E,$95,$9B,$9B,$9A ; $8670 E
.byte $17,$63,$95,$1E,$95,$9B,$9B,$9A ; $8678 F

.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8680 0
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8688 1
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8690 2
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8698 3
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $86A0 4
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $86A8 5
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $86B0 6
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $86B8 7
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $86C0 8
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $86C8 9
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $86D0 A
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $86D8 B
.byte $17,$63,$95,$1E,$95,$9B,$9B,$9A ; $86E0 C
.byte $17,$63,$95,$1E,$95,$9B,$9B,$9A ; $86E8 D <-ROW
.byte $17,$63,$95,$1E,$95,$9B,$9B,$9A ; $86F0 E
.byte $17,$63,$95,$1E,$95,$9B,$9B,$9A ; $86F8 F

.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8700 0
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8708 1
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8710 2
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8718 3
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $8720 4
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $8728 5
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $8730 6
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $8738 7
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $8740 8
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $8748 9
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $8750 A
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $8758 B
.byte $17,$63,$95,$1E,$95,$9B,$9B,$9A ; $8760 C
.byte $17,$63,$95,$1E,$95,$9B,$9B,$9A ; $8768 D
.byte $17,$63,$95,$1E,$95,$9B,$9B,$9A ; $8770 E <-ROW
.byte $17,$63,$95,$1E,$95,$9B,$9B,$9A ; $8778 F

.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8780 0
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8788 1
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8790 2
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $8798 3
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $87A0 4
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $87A8 5
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $87B0 6
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $87B8 7
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $87C0 8
.byte $83,$0D,$87,$0C,$87,$0B,$12,$13 ; $87C8 9
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $87D0 A
.byte $8E,$0C,$8E,$0F,$0B,$12,$13,$1A ; $87D8 B
.byte $17,$63,$95,$1E,$95,$9B,$9B,$9A ; $87E0 C
.byte $17,$63,$95,$1E,$95,$9B,$9B,$9A ; $87E8 D
.byte $17,$63,$95,$1E,$95,$9B,$9B,$9A ; $87F0 E
.byte $17,$63,$95,$1E,$95,$9B,$9B,$9A ; $87F8 F <-ROW

.byte $A0,$A0,$65,$41,$65,$62,$62,$E2 ; $8800 northwest rivers - high bit of X coord and Y coord are 0
.byte $A0,$A0,$65,$41,$65,$62,$62,$E2 ; $8808 northeast rivers - high bit of X coord is 1, Y coord is 0
.byte $20,$5F,$20,$5F,$A5,$E0,$DF,$E5 ; $8810 southwest rivers - high bit of X coord is 0, Y coord is 1
.byte $20,$5F,$20,$5F,$A5,$E0,$DF,$E5 ; $8818 southeast rivers - high bit of X coord is 1, Y coord is 1

.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $88 20 outer ocean top
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $88 28 outer ocean
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $88 30 outer ocean
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $88 38 outer ocean

.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $88 40 outer ocean top mid
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $88 48 outer ocean
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $88 50 outer ocean
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $88 58 outer ocean

.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $88 60 outer ocean bottom mid
.byte $5B,$DC,$5C,$DD,$5E,$DB,$5D,$DE ; $88 68 ocean
.byte $5B,$DC,$5C,$DD,$5E,$DB,$5D,$DE ; $88 70 ocean
.byte $5B,$DC,$5C,$DD,$5E,$DB,$5D,$DE ; $88 78 ocean

.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $88 80 outer ocean bottom
.byte $5B,$DC,$5C,$DD,$5E,$DB,$5D,$DE ; $88 88 ocean
.byte $5B,$DC,$5C,$DD,$5E,$DB,$5D,$DE ; $88 90 ocean
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; $88 98 outer ocean

; 00 00 00 00
; 00 00 00 00 -- shape of the ocean
; 00 11 11 11 -- 1s are inside the land ring
; 00 11 11 00 -- 0s are outer ocean

;; small maps: $88A0 

.byte $00,$00,$00,$00,$00,$00,$00,$00 ; Coneria
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; Pravoka
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; Elfland
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; Melmond
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; Crescent Lake
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; Gaia
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; Onrac
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; Leifen
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; Coneria Castle 1F
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; Elfland Castle
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; Northwest Castle
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; Castle of Ordeals 1F
.byte $01,$05,$04,$08,$07,$83,$02,$8E ; Temple of Fiends
.byte $15,$15,$64,$8D,$93,$90,$E6,$1D ; Earth Cave B1
.byte $6F,$6F,$6A,$6E,$97,$9A,$9A,$EB ; Gurgu Volcano B1
.byte $9C,$9C,$96,$96,$AB,$AC,$2C,$30 ; Ice Cave B1
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; Cardia
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; Bahamut's Room B1
.byte $4F,$3F,$4F,$3F,$CA,$CA,$A3,$59 ; Waterfall
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; Dwarf Cave
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; Matoya's Cave
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; Sarda's Cave
.byte $0A,$0A,$85,$84,$81,$66,$6B,$11 ; Marsh Cave B1
.byte $CF,$CF,$68,$3B,$4C,$B4,$E7,$B9 ; Mirage Tower 1F
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; Coneria Castle 2F
.byte $32,$32,$EA,$34,$33,$9D,$35,$4B ; Castle of Ordeals 2F
.byte $EA,$34,$33,$9D,$9D,$35,$35,$4B ; Castle of Ordeals 3F
.byte $84,$85,$10,$81,$2B,$66,$1A,$91 ; Marsh Cave B2
.byte $85,$10,$2B,$6B,$66,$11,$1A,$91 ; Marsh Cave B3
.byte $8D,$64,$90,$93,$91,$94,$1B,$1E ; Earth Cave B2
.byte $91,$93,$1C,$8F,$18,$16,$1D,$92 ; Earth Cave B3
.byte $1C,$8F,$18,$63,$16,$0E,$0E,$92 ; Earth Cave B4
.byte $63,$18,$94,$1B,$1E,$1D,$92,$21 ; Earth Cave B5
.byte $6A,$6E,$1F,$97,$23,$24,$EB,$27 ; Gurgu Volcano B2
.byte $1F,$6E,$6D,$24,$23,$22,$EE,$27 ; Gurgu Volcano B3
.byte $6D,$24,$28,$E4,$26,$EE,$29,$2A ; Gurgu Volcano B4
.byte $28,$E4,$EE,$26,$22,$27,$29,$2A ; Gurgu Volcano B5
.byte $98,$98,$6C,$AC,$2F,$2C,$2E,$30 ; Ice Cave B2
.byte $AB,$2F,$AC,$6C,$2E,$31,$30,$2D ; Ice Cave B3
.byte $00,$00,$00,$00,$00,$00,$00,$00 ; Bahamut's Room B2
.byte $3B,$ED,$4C,$68,$4A,$E7,$B9,$4E ; Mirage Tower 2F
.byte $ED,$68,$E7,$4A,$B4,$BE,$BE,$4E ; Mirage Tower 3F
.byte $C4,$E1,$48,$C2,$49,$C3,$C3,$F2 ; Sea Shrine B5
.byte $E1,$C4,$FE,$C6,$C2,$48,$C3,$F2 ; Sea Shrine B4
.byte $42,$72,$47,$5A,$DA,$FE,$45,$61 ; Sea Shrine B3
.byte $5A,$72,$FE,$C6,$DA,$48,$49,$61 ; Sea Shrine B2
.byte $43,$43,$72,$42,$47,$58,$58,$45 ; Sea Shrine B1
.byte $4D,$52,$69,$4D,$54,$B6,$40,$50 ; Sky Palace 1F
.byte $52,$69,$B6,$D5,$54,$40,$D8,$50 ; Sky Palace 2F
.byte $CC,$B3,$D5,$B6,$A4,$D8,$53,$D6 ; Sky Palace 3F
.byte $B3,$CC,$C1,$51,$B5,$53,$D2,$D6 ; Sky Palace 4F
.byte $C1,$51,$B5,$A4,$D2,$50,$56,$D6 ; Sky Palace 5F
.byte $57,$57,$B0,$B0,$B0,$BB,$BB,$D0 ; Temple of Fiends 1F
.byte $CB,$CB,$AE,$AE,$55,$55,$D0,$D3 ; Temple of Fiends 2F
.byte $CD,$CD,$D9,$D9,$D9,$AF,$AF,$D3 ; Temple of Fiends 3F
.byte $BF,$C0,$BF,$C0,$A1,$A1,$A1,$BA ; Temple of Fiends 4F - Earth
.byte $A8,$A8,$A6,$A6,$A9,$A9,$A7,$AA ; Temple of Fiends 5F - Fire
.byte $C9,$44,$C9,$44,$C5,$C5,$C8,$C7 ; Temple of Fiends 6F - Water
.byte $D1,$D7,$E8,$D8,$D4,$D3,$EC,$FF ; Temple of Fiends 7F - Wind
.byte $D7,$EC,$D8,$D4,$D3,$46,$59,$AF ; Temple of Fiends 8F - Chaos
.byte $13,$13,$8B,$8B,$8B,$19,$19,$94 ; Titan's Tunnel

;; 8A88


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  LUT for battle formations  [$8400 :: 0x2C410]
;;
;;    The table containing which enemies you fight, how many of them there are,
;;  what palettes to use, etc, etc.
;; 00 Formation Strengths/Battle Type: 1111 1 < Formation Strengths; 111 < Battle Type
;; 01 ID 1: ##
;; 02 ID 2: ##
;; 03 ID 3: ##
;; 04 ID 4: ##
;; 05 Min/Max ID 1: yX ; this enemy has priority--there will likely be more of this kind than the others
;; 06 Min/Max ID 2: yX
;; 07 Min/Max ID 3: yX
;; 08 Min/Max ID 4: yX ; this enemy will be more rare
;; 09 Palette 1: ##
;; 0A Palette 2: ##
;; 0B Palette 3: ##
;; 0C Palette Assignment: 11 11 11 11 < 2 bits per enemy
;; 0D Run Flag/Surprise Factor: 1 < run flag ; 111 1111 < surprise factor

;; Battle types:
;; xxxx x000 = 9 small
;; xxxx x001 = 4 large
;; xxxx x010 = 2 large & 6 small
;; xxxx x011 = Fiend
;; xxxx x100 = Mini boss 9 small
;; xxxx x101 = Mini boss 4 large
;; xxxx x110 = Mini boss mix
;; xxxx x111 = Chaos


;; Formation Strengths:
;; 0000 1xxx Double HP
;; 0001 0xxx Double Defense/Evade
;; 0010 0xxx Double Attack/Hit%
;; 0100 0xxx Double Gold
;; 1000 0xxx Double EXP

lut_BattleFormations:
;      00         01  02  03  04   05  06  07  08   09  0A  0B   0C         0D
.byte %00000000, $00,$FF,$FF,$FF, $35,$00,$00,$00, $00,$00,$00, %01000000, $04 ; 00 ; 3-5 Imp
.byte %00000000, $00,$01,$FF,$FF, $36,$04,$00,$00, $00,$01,$00, %01100000, $04 ; 80 ; 3-6 Imp,      0-4 GrImp
.byte %00000000, $15,$FF,$FF,$FF, $24,$00,$00,$00, $00,$00,$00, %01000000, $04 ; 01 ; 2-4 Bone
.byte %00000000, $15,$18,$FF,$FF, $35,$02,$00,$00, $0C,$0C,$00, %01000000, $04 ; 81 ; 3-5 Bone,     0-2 Crawl
.byte $00000000, $01,$02,$03,$00, $13,$02,$02,$02, $00,$01,$00, %01001000, $04 ; 02 ; 1-3 GrImp,    0-2 Wolf,     0-2 GrWolf,   0-2 Imp
.byte $00000000, $01,$FF,$FF,$FF, $13,$00,$00,$00, $00,$01,$00, %01001000, $04 ; 82 ; 1-3 GrImp
.byte $00000000, $02,$FF,$FF,$FF, $12,$00,$00,$00, $00,$00,$00, %01000000, $04 ; 03 ; 1-2 Wolf
.byte $00000000, $02,$03,$FF,$FF, $46,$01,$00,$00, $00,$01,$00, %01100000, $04 ; 83 ; 4-6 Wolf,     0-1 GrWolf
.byte $00000000, $2B,$FF,$FF,$FF, $24,$00,$00,$00, $16,$17,$00, %01000000, $04 ; 04 ; 2-4 Zombie
.byte $00000000, $2B,$2C,$FF,$FF, $23,$24,$00,$00, $16,$17,$00, %01100000, $04 ; 84 ; 2-3 Zombie,   2-4 Ghoul
.byte $00000000, $49,$FF,$FF,$FF, $12,$00,$00,$00, $1A,$00,$00, %01000000, $37 ; 05 ; 1-2 Spider
.byte $00000000, $45,$FF,$FF,$FF, $24,$00,$00,$00, $21,$00,$00, %01000000, $37 ; 85 ; 2-4 Scum
.byte $00000001, $74,$FF,$FF,$FF, $11,$00,$00,$00, $32,$00,$00, %01000000, $04 ; 06 ; 1-1 Madpony
.byte $00000001, $74,$FF,$FF,$FF, $24,$00,$00,$00, $32,$00,$00, %01000000, $04 ; 86 ; 2-4 Madpony
.byte $00000010, $17,$FF,$FF,$FF, $12,$00,$00,$00, $0D,$00,$00, %01000000, $04 ; 07 ; 1-2 Creep
.byte $00000010, $17,$1B,$FF,$FF, $13,$11,$00,$00, $0D,$0E,$00, %01100000, $04 ; 87 ; 1-3 Creep,    1-1 Ogre
.byte $00000000, $2C,$FF,$FF,$FF, $11,$00,$00,$00, $17,$00,$00, %01000000, $04 ; 08 ; 1-2 Ghoul
.byte $00000000, $2C,$2D,$FF,$FF, $25,$04,$00,$00, $17,$18,$00, %01100000, $04 ; 88 ; 2-5 Ghoul,    0-4 Geist
.byte $00000001, $06,$FF,$FF,$FF, $11,$00,$00,$00, $01,$00,$00, %01100000, $04 ; 09 ; 1-1 Iguana
.byte $00000001, $09,$06,$FF,$FF, $13,$02,$00,$00, $02,$01,$00, %01100000, $04 ; 89 ; 1-3 Giant,    0-2 Iguana
.byte $00000000, $27,$FF,$FF,$FF, $24,$00,$00,$00, $1A,$00,$00, %01000000, $5A ; 0A ; 2-4 Shadow
.byte $00000000, $27,$FF,$FF,$FF, $37,$00,$00,$00, $1A,$00,$00, %01000000, $5A ; 8A ; 3-7 Shadow
.byte $00000000, $03,$02,$FF,$FF, $25,$03,$00,$00, $00,$01,$00, %01000000, $04 ; 0B ; 2-5 GrWolf,   0-3 Wolf
.byte $00000000, $03,$FF,$FF,$FF, $48,$00,$00,$00, $01,$00,$00, %01000000, $04 ; 8B ; 4-8 GrWolf
.byte $00000001, $1B,$FF,$FF,$FF, $12,$00,$00,$00, $0E,$00,$00, %01000000, $04 ; 0C ; 1-2 Ogre
.byte $00000001, $1B,$19,$FF,$FF, $13,$02,$00,$00, $0E,$10,$00, %01100000, $04 ; 8C ; 1-3 Ogre      0-2 Hyena
.byte $00000000, $1E,$FF,$FF,$FF, $12,$00,$00,$00, $11,$00,$00, %01000000, $04 ; 0D ; 1-2 Asp
.byte $00000000, $1E,$FF,$FF,$FF, $37,$00,$00,$00, $11,$00,$00, %01000000, $04 ; 8D ; 3-7 Asp
.byte $00000010, $01,$04,$09,$FF, $05,$13,$02,$00, $01,$02,$00, %01101000, $21 ; 0E ; 0-5 GrImp,    1-3 WrWolf,   0-2 Giant
.byte $00000010, $01,$04,$FF,$FF, $25,$02,$00,$00, $01,$02,$00, %01100000, $21 ; 8E ; 2-5 GrImp,    0-2 WrWolf
.byte $00000000, $2D,$FF,$FF,$FF, $14,$00,$00,$00, $19,$00,$00, %01000000, $04 ; 0F ; 1-4 Specter
.byte $00000000, $2E,$2D,$FF,$FF, $25,$25,$00,$00, $19,$18,$00, %01100000, $04 ; 8F ; 2-5 Specter,  2-5 Geist
.byte $00000000, $3E,$FF,$FF,$FF, $23,$00,$00,$00, $1F,$00,$00, %01000000, $04 ; 10 ; 2-3 Gargoyle
.byte $00000000, $3E,$FF,$FF,$FF, $38,$00,$00,$00, $1F,$00,$00, %01000000, $04 ; 90 ; 3-8 Gargoyle
.byte $00000000, $04,$00,$FF,$FF, $36,$00,$00,$00, $02,$00,$00, %01000000, $21 ; 11 ; 3-6 WrWolf
.byte $00000000, $04,$03,$FF,$FF, $25,$05,$00,$00, $02,$01,$00, %01100000, $21 ; 91 ; 2-5 WrWolf,   0-5 GrWolf
.byte $00000000, $47,$00,$FF,$FF, $14,$00,$00,$00, $22,$00,$00, %01000000, $37 ; 12 ; 1-4 Ooze
.byte $00000000, $47,$4A,$FF,$FF, $25,$05,$00,$00, $22,$21,$00, %01100000, $37 ; 92 ; 2-5 Ooze,     0-5 Arachnid
.byte $00000001, $1C,$1B,$FF,$FF, $11,$12,$00,$00, $0F,$0E,$00, %01100000, $04 ; 13 ; 1-1 GrOgre,   1-2 Ogre
.byte $00000001, $1C,$1B,$FF,$FF, $14,$02,$00,$00, $0F,$0E,$00, %01100000, $04 ; 93 ; 1-4 GrOgre,   0-2 Ogre
.byte $00000000, $4A,$FF,$FF,$FF, $12,$00,$00,$00, $21,$00,$00, %01000000, $04 ; 14 ; 1-2 Arachnid
.byte $00000000, $4A,$FF,$FF,$FF, $48,$00,$00,$00, $21,$00,$00, %01000000, $04 ; 94 ; 4-8 Arachnid
.byte $00000000, $1F,$FF,$FF,$FF, $26,$00,$00,$00, $12,$00,$00, %01000000, $04 ; 15 ; 2-6 Cobra
.byte $00000000, $1F,$21,$FF,$FF, $26,$04,$00,$00, $12,$15,$00, %01100000, $04 ; 95 ; 2-6 Cobra,    0-4 Scorpion
.byte $00000000, $51,$FF,$FF,$FF, $26,$00,$00,$00, $26,$25,$00, %01000000, $04 ; 16 ; 2-6 Coctrice
.byte $00000000, $51,$4F,$FF,$FF, $26,$15,$00,$00, $26,$25,$00, %01000000, $04 ; 96 ; 2-6 Coctrice, 1-5 Mummy
.byte $00000001, $38,$FF,$FF,$FF, $14,$00,$00,$00, $15,$00,$00, %01000000, $04 ; 17 ; 1-4 Pede
.byte $00000001, $38,$FF,$FF,$FF, $24,$00,$00,$00, $15,$00,$00, %01000000, $04 ; 97 ; 2-4 Pede
.byte $00000000, $28,$FF,$FF,$FF, $26,$00,$00,$00, $18,$00,$00, %01100000, $04 ; 18 ; 2-6 Image
.byte $00000000, $28,$29,$FF,$FF, $26,$04,$00,$00, $18,$19,$00, %01100000, $04 ; 98 ; 2-6 Image     0-4 Wraith

.byte $00000001, $3A,$FF,$FF,$FF, $13,$00,$00,$00, $1D,$00,$00, %01000000, $1B ; 19 ; 1-3 Tiger
.byte $00000001, $3A,$3B,$FF,$FF, $02,$13,$00,$00, $1D,$1A,$00, %01100000, $1B ; 99 ; 1-3 Saber T., 0-2 Tiger
;; not sure about this one ^
;; taking a break here... the below entries need looking at for palettes and assignments

.byte $00000010, $21,$FF,$FF,$FF, $24,$00,$00,$00, $11,$15,$00, %01000000, $1B ; 1A ; 2-4 Scorpion
.byte $00000010, $21,$23,$FF,$FF, $26,$12,$00,$00, $11,$15,$00, %01000000, $1B ; 9A ; 2-6 Scorpion, 1-2 Bull
.byte $00000001, $25,$23,$FF,$FF, $12,$01,$00,$00, $11,$12,$00, %01000000, $1B ; 1B ; 1-2 Troll,    0-1 Bull
.byte $00000001, $25,$23,$FF,$FF, $12,$02,$00,$00, $11,$12,$00, %01000000, $1B ; 9B ; 1-2 Troll,    0-2 Bull
.byte $00000000, $67,$FF,$FF,$FF, $24,$00,$00,$00, $32,$32,$00, %00000000, $A1 ; 1C ; 2-4 Wizard
.byte $00000000, $67,$FF,$FF,$FF, $37,$00,$00,$00, $32,$32,$00, %00000000, $A1 ; 9C ; 3-7 Wizard
.byte $00000000, $4F,$FF,$FF,$FF, $25,$00,$00,$00, $25,$26,$00, %00010000, $04 ; 1D ; 2-5 Mummy
.byte $00000000, $4F,$50,$FF,$FF, $37,$11,$00,$00, $25,$26,$00, %00010000, $04 ; 9D ; 3-7 Mummy,    1-1 WzMummy
.byte $00000001, $09,$FF,$FF,$FF, $12,$00,$00,$00, $02,$02,$00, %00000000, $04 ; 1E ; 1-2 Giant
.byte $00000001, $09,$FF,$FF,$FF, $24,$00,$00,$00, $02,$02,$00, %00000000, $04 ; 9E ; 2-4 Giant
.byte $00000001, $09,$06,$FF,$FF, $12,$03,$00,$00, $01,$02,$00, %01000000, $04 ; 1F ; 1-2 Giant,    0-3 Iguana
.byte $00000001, $09,$06,$FF,$FF, $14,$11,$00,$00, $01,$02,$00, %01000000, $04 ; 9F ; 1-4 Giant,    1-1 Iguana
.byte $00000010, $5D,$FF,$FF,$FF, $12,$00,$00,$00, $2A,$2B,$00, %00010000, $1B ; 20 ; 1-2 Hydra
.byte $00000010, $5D,$59,$FF,$FF, $14,$03,$00,$00, $2A,$2B,$00, %00010000, $1B ; A0 ; 1-4 Hydra,    0-3 Gator
.byte $00000001, $40,$FF,$FF,$FF, $11,$00,$00,$00, $1C,$1C,$00, %00000000, $84 ; 21 ; 1-1 Earth
.byte $00000001, $40,$FF,$FF,$FF, $24,$00,$00,$00, $1C,$1C,$00, %00000000, $84 ; A1 ; 2-4 Earth
.byte $00000001, $1A,$1D,$FF,$FF, $01,$12,$00,$00, $0D,$10,$00, %00010000, $B7 ; 22 ; 0-1 Cerebus,  1-2 WzOgre
.byte $00000001, $1A,$1D,$FF,$FF, $13,$02,$00,$00, $0D,$10,$00, %00010000, $B7 ; A2 ; 1-3 Cerebus,  0-2 WzOgre
.byte $00000000, $52,$FF,$FF,$FF, $25,$00,$00,$00, $25,$25,$00, %00000000, $04 ; 23 ; 2-5 Perelisk
.byte $00000000, $52,$FF,$FF,$FF, $48,$00,$00,$00, $25,$25,$00, %00000000, $04 ; A3 ; 4-8 Perelisk
.byte $00000001, $5E,$FF,$FF,$FF, $11,$00,$00,$00, $03,$03,$00, %00000000, $04 ; 24 ; 1-1 R. Hydra
.byte $00000001, $5E,$FF,$FF,$FF, $44,$00,$00,$00, $03,$03,$00, %00000000, $04 ; A4 ; 4-4 R. Hydra
.byte $00000010, $5B,$FF,$FF,$FF, $13,$00,$00,$00, $2A,$2B,$00, %01000000, $21 ; 25 ; 1-3 Ocho
.byte $00000010, $5B,$57,$FF,$FF, $11,$02,$00,$00, $2A,$2B,$00, %01000000, $21 ; A5 ; 1-1 Ocho,     0-2 Caribe
.byte $00000001, $0B,$FF,$FF,$FF, $12,$00,$00,$00, $03,$03,$00, %00000000, $04 ; 26 ; 1-2 R. Giant
.byte $00000001, $0B,$07,$FF,$FF, $11,$13,$00,$00, $03,$03,$00, %00000000, $04 ; A6 ; 1-1 R. Giant, 1-3 Agama
.byte $00000001, $41,$FF,$FF,$FF, $12,$00,$00,$00, $03,$03,$00, %00000000, $84 ; 27 ; 1-2 Fire
.byte $00000001, $41,$FF,$FF,$FF, $34,$00,$00,$00, $03,$03,$00, %00000000, $84 ; A7 ; 3-4 Fire
.byte $00000001, $31,$FF,$FF,$FF, $11,$00,$00,$00, $19,$19,$00, %00000000, $04 ; 28 ; 1-1 Grey W.
.byte $00000001, $31,$FF,$FF,$FF, $24,$00,$00,$00, $19,$19,$00, %00000000, $04 ; A8 ; 2-4 Grey W.
.byte $00000001, $07,$FF,$FF,$FF, $11,$00,$00,$00, $03,$03,$00, %00000000, $04 ; 29 ; 1-1 Agama
.byte $00000001, $07,$FF,$FF,$FF, $24,$00,$00,$00, $03,$03,$00, %00000000, $04 ; A9 ; 2-4 Agama
.byte $00000001, $43,$FF,$FF,$FF, $11,$00,$00,$00, $0D,$0D,$00, %00000000, $04 ; 2A ; 1-1 Red D.
.byte $00000001, $43,$FF,$FF,$FF, $24,$00,$00,$00, $0D,$0D,$00, %00000000, $04 ; AA ; 2-4 Red D.
.byte $00000000, $16,$15,$18,$FF, $11,$24,$11,$00, $0C,$0D,$00, %01000000, $04 ; 2B ; 1-1 R. Bone,  2-4 Bone,     1-1 Crawl
.byte $00000000, $16,$FF,$FF,$FF, $36,$00,$00,$00, $0C,$0D,$00, %01000000, $04 ; AB ; 3-6 R. Bone
.byte $00000000, $29,$28,$2E,$2D, $15,$03,$03,$03, $18,$19,$00, %01000100, $04 ; 2C ; 1-5 Wraith,   0-3 Image,    0-3 Specter,  0-3 Geist
.byte $00000000, $29,$FF,$FF,$FF, $26,$00,$00,$00, $18,$19,$00, %01000100, $04 ; AC ; 2-6 Wraith
.byte $00000000, $05,$FF,$FF,$FF, $37,$00,$00,$00, $04,$04,$00, %00000000, $04 ; 2D ; 3-7 FrWolf
.byte $00000000, $05,$FF,$FF,$FF, $47,$00,$00,$00, $04,$04,$00, %00000000, $04 ; AD ; 4-7 FrWolf
.byte $00000010, $0A,$05,$FF,$FF, $11,$02,$00,$00, $04,$04,$00, %00000000, $84 ; 2E ; 1-1 FrGiant,  0-2 FrWolf
.byte $00000010, $0A,$05,$FF,$FF, $22,$26,$00,$00, $04,$04,$00, %00000000, $84 ; AE ; 2-2 FrGiant,  2-6 FrWolf
.byte $00000000, $72,$FF,$FF,$FF, $14,$00,$00,$00, $24,$2E,$00, %00010000, $4B ; 2F ; 1-4 Mage
.byte $00000000, $72,$73,$FF,$FF, $23,$11,$00,$00, $24,$2E,$00, %00010000, $4B ; AF ; 2-3 Mage,     1-1 Fighter
.byte $00000001, $42,$FF,$FF,$FF, $12,$00,$00,$00, $07,$07,$00, %00000000, $04 ; 30 ; 1-2 Frost D.
.byte $00000001, $42,$FF,$FF,$FF, $34,$00,$00,$00, $07,$07,$00, %00000000, $04 ; B0 ; 3-4 Frost D.
.byte $00000001, $39,$FF,$FF,$FF, $11,$00,$00,$00, $0C,$0C,$00, %00000000, $04 ; 31 ; 1-1 GrPede
.byte $00000001, $39,$FF,$FF,$FF, $12,$00,$00,$00, $0C,$0C,$00, %00000000, $04 ; B1 ; 1-2 GrPede
.byte $00000001, $24,$FF,$FF,$FF, $13,$00,$00,$00, $12,$16,$00, %01000000, $84 ; 32 ; 1-3 ZomBull
.byte $00000001, $24,$25,$FF,$FF, $14,$02,$00,$00, $12,$16,$00, %01000000, $84 ; B2 ; 1-4 ZomBull,  0-2 Troll
.byte $00000000, $37,$FF,$FF,$FF, $35,$00,$00,$00, $0E,$1E,$00, %01000000, $04 ; 33 ; 3-5 Mancat
.byte $00000000, $37,$34,$FF,$FF, $37,$05,$00,$00, $0E,$1E,$00, %01000000, $04 ; B3 ; 3-7 Mancat,   0-5 Medusa
.byte $00000010, $34,$FF,$FF,$FF, $25,$00,$00,$00, $0E,$1A,$00, %00010000, $1B ; 34 ; 2-5 Medusa
.byte $00000010, $34,$3B,$FF,$FF, $36,$12,$00,$00, $0E,$1A,$00, %00010000, $1B ; B4 ; 3-6 Medusa,   1-2 Saber T.
.byte $00000010, $68,$FF,$FF,$FF, $25,$00,$00,$00, $33,$34,$00, %00010000, $04 ; 35 ; 2-5 Sorcerer
.byte $00000010, $68,$6C,$FF,$FF, $16,$12,$00,$00, $33,$34,$00, %00010000, $04 ; B5 ; 1-6 Sorcerer, 1-2 MudGol
.byte $00000001, $4B,$FF,$FF,$FF, $13,$00,$00,$00, $1D,$1D,$00, %00000000, $04 ; 36 ; 1-3 Manticor
.byte $00000001, $4B,$FF,$FF,$FF, $34,$00,$00,$00, $1D,$1D,$00, %00000000, $04 ; B6 ; 3-4 Manticor
.byte $00000001, $54,$FF,$FF,$FF, $13,$00,$00,$00, $27,$27,$00, %00000000, $04 ; 37 ; 1-3 Wyrm
.byte $00000001, $54,$FF,$FF,$FF, $13,$00,$00,$00, $27,$27,$00, %00000000, $04 ; B7 ; 1-3 Wyrm
.byte $00000001, $4D,$FF,$FF,$FF, $13,$00,$00,$00, $22,$22,$00, %00000000, $04 ; 38 ; 1-3 R. Ankylo
.byte $00000001, $4D,$FF,$FF,$FF, $14,$00,$00,$00, $22,$22,$00, %00000000, $04 ; B8 ; 1-4 R. Ankylo
.byte $00000010, $36,$FF,$FF,$FF, $24,$00,$00,$00, $1A,$1D,$00, %01000000, $1B ; 39 ; 2-4 Catman
.byte $00000010, $36,$3B,$FF,$FF, $36,$12,$00,$00, $1A,$1D,$00, %01000000, $1B ; B9 ; 3-6 Catman,   1-2 Saber T.
.byte $00000001, $08,$FF,$FF,$FF, $12,$00,$00,$00, $05,$05,$00, %00000000, $1B ; 3A ; 1-2 Sauria
.byte $00000001, $08,$FF,$FF,$FF, $24,$00,$00,$00, $05,$05,$00, %00000000, $1B ; BA ; 2-4 Sauria
.byte $00000001, $65,$FF,$FF,$FF, $13,$00,$00,$00, $30,$30,$00, %00000000, $04 ; 3B ; 1-3 Chimera
.byte $00000001, $65,$FF,$FF,$FF, $34,$00,$00,$00, $30,$30,$00, %00000000, $04 ; BB ; 3-4 Chimera
.byte $00000001, $30,$FF,$FF,$FF, $11,$00,$00,$00, $1C,$1C,$00, %00000000, $04 ; 3C ; 1-1 Sand W.
.byte $00000001, $30,$FF,$FF,$FF, $12,$00,$00,$00, $1C,$1C,$00, %00000000, $04 ; BC ; 1-2 Sand W.
.byte $00000001, $55,$53,$FF,$FF, $11,$00,$00,$00, $28,$29,$00, %01000000, $04 ; 3D ; 1-1 Tyro
.byte $00000001, $55,$53,$FF,$FF, $11,$01,$00,$00, $28,$29,$00, %01000000, $04 ; BD ; 1-1 Tyro,     0-1 Wyvern
.byte $00000001, $53,$54,$56,$FF, $00,$00,$11,$00, $27,$28,$00, %01000100, $04 ; 3E ; 1-1 T-Rex
.byte $00000001, $53,$54,$FF,$FF, $13,$05,$00,$00, $27,$28,$00, %01000100, $04 ; BE ; 1-3 Wyvern,   0-5 Wyrm
.byte $00000001, $6C,$FF,$FF,$FF, $13,$00,$00,$00, $34,$35,$00, %00010000, $04 ; 3F ; 1-3 MudGol
.byte $00000001, $6C,$6D,$FF,$FF, $14,$13,$00,$00, $34,$35,$00, %00010000, $04 ; BF ; 1-4 MudGol,   1-3 RockGol
.byte $00000000, $35,$FF,$FF,$FF, $14,$00,$00,$00, $0F,$0F,$00, %00000000, $04 ; 40 ; 1-4 GrMedusa
.byte $00000000, $35,$FF,$FF,$FF, $47,$00,$00,$00, $0F,$0F,$00, %00000000, $04 ; C0 ; 4-7 GrMedusa
.byte $00000001, $5C,$FF,$FF,$FF, $11,$00,$00,$00, $2C,$2C,$00, %00000000, $21 ; 41 ; 1-1 Naocho
.byte $00000001, $5C,$FF,$FF,$FF, $12,$00,$00,$00, $2C,$2C,$00, %00000000, $21 ; C1 ; 1-2 Naocho
.byte $00000010, $26,$22,$FF,$FF, $12,$13,$00,$00, $13,$14,$00, %01000000, $04 ; 42 ; 1-2 SeaTroll, 1-3 Lobster
.byte $00000010, $26,$22,$FF,$FF, $12,$14,$00,$00, $13,$14,$00, %01000000, $04 ; C2 ; 1-2 SeaTroll, 1-4 Lobster
.byte $00000000, $22,$FF,$FF,$FF, $26,$00,$00,$00, $13,$13,$00, %00000000, $04 ; 43 ; 2-6 Lobster
.byte $00000000, $22,$FF,$FF,$FF, $37,$00,$00,$00, $13,$13,$00, %00000000, $04 ; C3 ; 3-7 Lobster
.byte $00000010, $22,$20,$26,$FF, $16,$25,$22,$00, $13,$14,$00, %00000100, $04 ; 44 ; 1-6 Lobster,  2-5 SeaSnake, 2-2 SeaTroll
.byte $00000010, $22,$20,$FF,$FF, $15,$03,$00,$00, $13,$14,$00, %00000100, $04 ; C4 ; 1-5 Lobster,  0-3 SeaSnake
.byte $00000010, $0E,$12,$FF,$FF, $01,$12,$00,$00, $07,$0B,$00, %01000000, $04 ; 45 ; 0-1 WzSahag,  1-2 GrShark
.byte $00000010, $0E,$12,$FF,$FF, $36,$22,$00,$00, $07,$0B,$00, %01000000, $04 ; C5 ; 3-6 WzSsahag, 2-2 GrShark
.byte $00000010, $33,$FF,$FF,$FF, $11,$00,$00,$00, $07,$16,$00, %00010000, $84 ; 46 ; 1-1 Phantom
.byte $00000010, $2A,$FF,$FF,$FF, $25,$00,$00,$00, $07,$16,$00, %00010000, $84 ; C6 ; 2-5 Ghost
.byte $00000010, $63,$61,$FF,$FF, $11,$01,$00,$00, $13,$13,$00, %00000000, $04 ; 47 ; 1-1 Naga,     0-1 Water
.byte $00000010, $63,$61,$FF,$FF, $12,$36,$00,$00, $13,$13,$00, %00000000, $04 ; C7 ; 1-2 Naga,     3-6 Water
.byte $00000001, $12,$14,$FF,$FF, $11,$01,$00,$00, $07,$09,$00, %00010000, $04 ; 48 ; 1-1 GrShark,  0-1 BigEye
.byte $00000001, $12,$14,$FF,$FF, $12,$12,$00,$00, $07,$09,$00, %00010000, $04 ; C8 ; 1-2 GrShark,  1-2 BigEye
.byte $00000000, $61,$FF,$FF,$FF, $13,$00,$00,$00, $13,$13,$00, %00000000, $84 ; 49 ; 1-3 Water
.byte $00000000, $61,$FF,$FF,$FF, $36,$00,$00,$00, $13,$13,$00, %00000000, $84 ; C9 ; 3-6 Water
.byte $00000000, $50,$4F,$51,$52, $15,$08,$08,$08, $25,$26,$00, %01000100, $04 ; 4A ; 1-5 WzMummy,  0-8 Mummy,    0-8 Coctrice, 0-8 Perelisk
.byte $00000000, $50,$4F,$FF,$FF, $12,$16,$00,$00, $25,$26,$00, %01000100, $04 ; CA ; 1-2 WzMummy,  1-6 Mummy
.byte $00000001, $44,$FF,$FF,$FF, $12,$00,$00,$00, $16,$16,$00, %00000000, $84 ; 4B ; 1-2 Zombie D.
.byte $00000001, $44,$FF,$FF,$FF, $24,$00,$00,$00, $16,$16,$00, %00000000, $84 ; CB ; 2-4 Zombie D.
.byte $00000000, $5F,$60,$FF,$FF, $25,$00,$00,$00, $2E,$2F,$00, %00010000, $04 ; 4C ; 2-5 Guard
.byte $00000000, $5F,$60,$FF,$FF, $01,$11,$00,$00, $2E,$2F,$00, %00010000, $04 ; CC ; 0-1 Gguard,   1-1 Sentry
.byte $00000000, $6F,$FF,$FF,$FF, $25,$00,$00,$00, $24,$24,$00, %00000000, $04 ; 4D ; 2-5 Badman
.byte $00000000, $6F,$FF,$FF,$FF, $59,$00,$00,$00, $24,$24,$00, %00000000, $04 ; CD ; 5-9 Badman
.byte $00000001, $6B,$FF,$FF,$FF, $11,$00,$00,$00, $14,$14,$00, %00000000, $84 ; 4E ; 1-1 Blue D.
.byte $00000001, $6B,$FF,$FF,$FF, $23,$00,$00,$00, $14,$14,$00, %00000000, $84 ; CE ; 2-3 Blue D.
.byte $00000010, $75,$FF,$FF,$FF, $13,$00,$00,$00, $24,$33,$00, %01000000, $04 ; 4F ; 1-3 Nitemare
.byte $00000010, $75,$6F,$FF,$FF, $12,$12,$00,$00, $24,$33,$00, %01000000, $04 ; CF ; 1-2 Nitemare, 1-2 Badman
.byte $00000000, $48,$FF,$FF,$FF, $36,$00,$00,$00, $24,$24,$00, %00000000, $04 ; 50 ; 3-6 Slime
.byte $00000000, $48,$FF,$FF,$FF, $48,$00,$00,$00, $24,$24,$00, %00000000, $04 ; D0 ; 4-8 Slime
.byte $00000000, $62,$FF,$FF,$FF, $24,$00,$00,$00, $04,$04,$00, %00000000, $04 ; 51 ; 2-4 Air
.byte $00000000, $62,$FF,$FF,$FF, $36,$00,$00,$00, $04,$04,$00, %00000000, $04 ; D1 ; 3-6 Air
.byte $00000010, $64,$62,$FF,$FF, $11,$01,$00,$00, $04,$2D,$00, %01000000, $04 ; 52 ; 1-1 GrNaga,   0-1 Air
.byte $00000010, $64,$62,$FF,$FF, $01,$13,$00,$00, $04,$2D,$00, %01000000, $04 ; D2 ; 0-1 GrNaga,   1-3 Air
.byte $00000010, $3D,$FF,$FF,$FF, $13,$00,$00,$00, $16,$20,$00, %01000000, $04 ; 53 ; 1-3 WzVamp
.byte $00000010, $3D,$44,$FF,$FF, $13,$12,$00,$00, $16,$20,$00, %01000000, $04 ; D3 ; 1-3 WzVamp,   1-2 Zombie D.
.byte $00000010, $70,$75,$FF,$FF, $11,$12,$00,$00, $17,$33,$00, %00010000, $04 ; 54 ; 1-1 Evilman,  1-2 Nitemare
.byte $00000010, $70,$75,$FF,$FF, $12,$12,$00,$00, $17,$33,$00, %00010000, $04 ; D4 ; 1-2 Evilman,  1-2 Nitemare
.byte $00000001, $65,$66,$FF,$FF, $12,$12,$00,$00, $30,$31,$00, %00010000, $04 ; 55 ; 1-2 Chimera,  1-2 Jimera
.byte $00000001, $65,$FF,$FF,$FF, $11,$00,$00,$00, $30,$31,$00, %00010000, $04 ; D5 ; 1-1 Chimera
.byte $00000010, $76,$FF,$FF,$FF, $11,$00,$00,$00, $2E,$2F,$00, %01000000, $4B ; 56 ; 1-1 WarMech
.byte $00000010, $73,$FF,$FF,$FF, $12,$00,$00,$00, $2E,$2F,$00, %01000000, $4B ; D6 ; 1-2 Ffighter
.byte $00000001, $2F,$FF,$FF,$FF, $12,$00,$00,$00, $1B,$1B,$00, %00000000, $84 ; 57 ; 1-2 Worm
.byte $00000001, $2F,$FF,$FF,$FF, $34,$00,$00,$00, $1B,$1B,$00, %00000000, $84 ; D7 ; 3-4 Worm
.byte $00000001, $6D,$FF,$FF,$FF, $12,$00,$00,$00, $35,$35,$00, %00000000, $04 ; 58 ; 1-2 RockGol
.byte $00000001, $6D,$FF,$FF,$FF, $24,$00,$00,$00, $35,$35,$00, %00000000, $04 ; D8 ; 2-4 RockGol
.byte $00000001, $6A,$FF,$FF,$FF, $11,$00,$00,$00, $21,$21,$00, %00000000, $04 ; 59 ; 1-1 Gas D.
.byte $00000001, $6A,$FF,$FF,$FF, $24,$00,$00,$00, $21,$21,$00, %00000000, $04 ; D9 ; 2-4 Gas D.
.byte $00000001, $12,$11,$FF,$FF, $12,$01,$00,$00, $07,$09,$00, %00010000, $04 ; 5A ; 1-2 GrShark,  0-1 Shark
.byte $00000001, $12,$11,$FF,$FF, $12,$01,$00,$00, $07,$09,$00, %00010000, $04 ; DA ; 1-2 GrShark,  0-1 Shark
.byte $00000010, $0C,$13,$FF,$FF, $06,$12,$00,$00, $08,$09,$00, %01000000, $04 ; 5B ; 0-6 Sahag,    1-2 R.Sahag
.byte $00000010, $0C,$0D,$FF,$FF, $37,$02,$00,$00, $08,$09,$00, %01000000, $04 ; DB ; 3-7 Sahag,    0-2 R.Sahag
.byte $00000010, $10,$FF,$FF,$FF, $15,$00,$00,$00, $09,$0A,$00, %01000000, $04 ; 5C ; 1-5 Kyzoku
.byte $00000010, $11,$FF,$FF,$FF, $11,$00,$00,$00, $09,$0A,$00, %01000000, $04 ; DC ; 1-1 Shark
.byte $00000010, $11,$0C,$FF,$FF, $12,$02,$00,$00, $08,$09,$00, %01010000, $04 ; 5D ; 1-2 Shark,    0-2 Sahag
.byte $00000010, $0C,$FF,$FF,$FF, $46,$00,$00,$00, $08,$09,$00, %01010000, $04 ; DD ; 4-6 Sahag
.byte $00000010, $11,$0D,$FF,$FF, $11,$01,$00,$00, $08,$09,$00, %01000000, $04 ; 5E ; 1-1 Shark,    0-1 R.Sahag
.byte $00000010, $11,$0D,$FF,$FF, $12,$03,$00,$00, $08,$09,$00, %01000000, $04 ; DE ; 1-2 Shark,    0-3 R.Sahag
.byte $00000000, $57,$FF,$FF,$FF, $26,$00,$00,$00, $2A,$2A,$00, %00000000, $04 ; 5F ; 2-6 Caribe
.byte $00000000, $57,$FF,$FF,$FF, $38,$00,$00,$00, $2A,$2A,$00, %00000000, $04 ; DF ; 3-8 Carive
.byte $00000001, $5D,$5B,$FF,$FF, $12,$02,$00,$00, $2A,$2B,$00, %00010000, $21 ; 60 ; 1-2 Hydra,    0-2 Ocho
.byte $00000001, $5D,$5B,$FF,$FF, $11,$01,$00,$00, $2A,$2B,$00, %00010000, $21 ; E0 ; 1-1 Hydra,    0-1 OCHO
.byte $00000010, $26,$20,$22,$FF, $12,$02,$02,$00, $13,$14,$00, %01000000, $04 ; 61 ; 1-2 SeaTroll, 0-2 SeaSnake, 0-2 Lobster
.byte $00000010, $26,$20,$FF,$FF, $11,$03,$00,$00, $13,$14,$00, %01000000, $04 ; E1 ; 1-1 SeaTroll, 0-3 SeaSnake
.byte $00000000, $5A,$58,$FF,$FF, $12,$03,$00,$00, $2C,$2D,$00, %01000000, $04 ; 62 ; 1-2 FrGator,  0-3 R.Caribe
.byte $00000000, $5A,$58,$FF,$FF, $11,$14,$00,$00, $2C,$2D,$00, %01000000, $04 ; E2 ; 1-1 FrGator,  1-4 R.Caribe
.byte $00000001, $25,$FF,$FF,$FF, $12,$00,$00,$00, $12,$12,$00, %00000000, $04 ; 63 ; 1-2 Troll
.byte $00000001, $25,$FF,$FF,$FF, $24,$00,$00,$00, $12,$12,$00, %00000000, $04 ; E3 ; 2-4 Troll
.byte $00000001, $23,$FF,$FF,$FF, $12,$00,$00,$00, $11,$11,$00, %00000000, $1B ; 64 ; 1-2 Bull
.byte $00000001, $23,$FF,$FF,$FF, $24,$00,$00,$00, $11,$11,$00, %00000000, $1B ; E4 ; 2-4 Bull
.byte $00000010, $57,$59,$5B,$FF, $02,$02,$11,$00, $2A,$2B,$00, %00010100, $1E ; 65 ; 0-2 Caribe,   0-2 Gator,    1 Ocho
.byte $00000010, $57,$59,$FF,$FF, $24,$02,$00,$00, $2A,$2B,$00, %00010100, $1E ; E5 ; 2-4 Caribe,   0-2 Gator
.byte $00000000, $4A,$49,$45,$46, $12,$02,$01,$01, $1A,$21,$00, %01000100, $37 ; 66 ; 1-2 Arachnid, 0-1 Spider,   0-1 Scum,     0-1 Muck
.byte $00000000, $4A,$49,$FF,$FF, $36,$02,$00,$00, $1A,$21,$00, %01000100, $37 ; E6 ; 3-6 Arachnid, 0-2 Spider
.byte $00000010, $36,$3B,$FF,$FF, $13,$02,$00,$00, $1A,$1D,$00, %01000000, $1B ; 67 ; 1-3 Catman,   0-2 Saber T.
.byte $00000010, $36,$FF,$FF,$FF, $47,$00,$00,$00, $1A,$1D,$00, %01000000, $1B ; E7 ; 4-7 Catman.
.byte $00000000, $3C,$FF,$FF,$FF, $25,$00,$00,$00, $1F,$20,$00, %01000000, $04 ; 68 ; 2-5 WzVamp
.byte $00000000, $3D,$3C,$FF,$FF, $11,$36,$00,$00, $1F,$20,$00, %01000000, $04 ; E8 ; 1-1 WzVamp,   3-6 Vampire
.byte $00000110, $32,$FF,$FF,$FF, $11,$00,$00,$00, $17,$17,$00, %00000000, $84 ; 69 ; 1-1 Eye
.byte $00000110, $32,$FF,$FF,$FF, $23,$00,$00,$00, $17,$17,$00, %00000000, $84 ; E9 ; 2-3 Eye
.byte $00000000, $3F,$FF,$FF,$FF, $25,$00,$00,$00, $20,$20,$00, %00000000, $04 ; 6A ; 2-5 R.Goyle
.byte $00000000, $3F,$FF,$FF,$FF, $37,$00,$00,$00, $20,$20,$00, %00000000, $04 ; EA ; 3-7 R.Goyle
.byte $00000000, $46,$FF,$FF,$FF, $13,$00,$00,$00, $1A,$1A,$00, %00000000, $04 ; 6B ; 1-3 Muck
.byte $00000000, $46,$FF,$FF,$FF, $47,$00,$00,$00, $1A,$1A,$00, %00000000, $04 ; EB ; 4-7 Muck
.byte $00000000, $68,$FF,$FF,$FF, $13,$00,$00,$00, $33,$33,$00, %00000000, $04 ; 6C ; 1-3 Sorcerer
.byte $00000000, $68,$FF,$FF,$FF, $37,$00,$00,$00, $33,$33,$00, %00000000, $04 ; EC ; 3-7 Sorcerer
.byte $00000001, $1A,$FF,$FF,$FF, $12,$00,$00,$00, $0D,$0D,$00, %00000000, $37 ; 6D ; 1-2 Cerebus
.byte $00000001, $1A,$FF,$FF,$FF, $34,$00,$00,$00, $0D,$0D,$00, %00000000, $37 ; ED ; 3-4 Cerebus
.byte $00000001, $1D,$1C,$19,$FF, $11,$11,$02,$00, $0F,$10,$00, %01000100, $84 ; 6E ; 1-1 WzOgre,   1 GrOgre,     0-2 Hyena
.byte $00000001, $1D,$1C,$FF,$FF, $13,$02,$00,$00, $0F,$10,$00, %01000100, $84 ; EE ; 1-3 WzOgre,   0-2 GrOgre
.byte $00000001, $4C,$FF,$FF,$FF, $12,$00,$00,$00, $23,$23,$00, %00000000, $04 ; 6F ; 1-2 Sphinx
.byte $00000001, $4C,$FF,$FF,$FF, $14,$00,$00,$00, $23,$23,$00, %00000000, $04 ; EF ; 1-4 Sphinx
.byte $00000001, $53,$FF,$FF,$FF, $13,$00,$00,$00, $28,$28,$00, %00000000, $04 ; 70 ; 1-3 Wyvern
.byte $00000001, $53,$FF,$FF,$FF, $14,$00,$00,$00, $28,$28,$00, %00000000, $04 ; F0 ; 1-4 Wyvern
.byte $00000001, $4E,$FF,$FF,$FF, $11,$00,$00,$00, $1C,$1C,$00, %00000000, $04 ; 71 ; 1-1 Ankylo
.byte $00000001, $4E,$FF,$FF,$FF, $12,$00,$00,$00, $1C,$1C,$00, %00000000, $04 ; F1 ; 1-2 Ankylo
.byte $00000000, $20,$FF,$FF,$FF, $24,$00,$00,$00, $13,$13,$00, %00000000, $04 ; 72 ; 2-4 Sea Snake
.byte $00000000, $20,$FF,$FF,$FF, $36,$00,$00,$00, $13,$13,$00, %00000000, $04 ; F2 ; 3-6 Sea Snake
.byte $00000011, $78,$FF,$FF,$FF, $11,$00,$00,$00, $36,$37,$00, %00000000, $84 ; 73 ; 1-1 Lich 2
.byte $00000011, $77,$FF,$FF,$FF, $11,$00,$00,$00, $36,$37,$00, %00000000, $84 ; F3 ; 1-1 Lich 1
.byte $00000011, $7A,$FF,$FF,$FF, $11,$00,$00,$00, $38,$39,$00, %00000001, $84 ; 74 ; 1-1 Kary 2
.byte $00000011, $79,$FF,$FF,$FF, $11,$00,$00,$00, $38,$39,$00, %00000001, $84 ; F4 ; 1-1 Kary 1
.byte $00000011, $7C,$FF,$FF,$FF, $11,$00,$00,$00, $3A,$3B,$00, %00000010, $84 ; 75 ; 1-1 Kraken 2
.byte $00000011, $7B,$FF,$FF,$FF, $11,$00,$00,$00, $3A,$3B,$00, %00000010, $84 ; F5 ; 1-1 Kraken 1
.byte $00000011, $7E,$FF,$FF,$FF, $11,$00,$00,$00, $3C,$3D,$00, %00000011, $84 ; 76 ; 1-1 Tiamat 2
.byte $00000011, $7D,$FF,$FF,$FF, $11,$00,$00,$00, $3C,$3D,$00, %00000011, $84 ; F6 ; 1-1 Tiamat 1
.byte $00000000, $FF,$FF,$FF,$FF, $00,$00,$00,$00, $00,$00,$00, %01000000, $00 ; 77 ;
.byte $00000000, $FF,$FF,$FF,$FF, $00,$00,$00,$00, $00,$00,$00, %01000000, $00 ; F7 ;
.byte $00000000, $FF,$FF,$FF,$FF, $00,$00,$00,$00, $00,$00,$00, %01000000, $00 ; 78 ;
.byte $00000000, $FF,$FF,$FF,$FF, $00,$00,$00,$00, $00,$00,$00, %01000000, $00 ; F8 ;
.byte $00000100, $69,$FF,$FF,$FF, $11,$00,$00,$00, $13,$2E,$00, %01000000, $84 ; 79 ; 1-1 Garland
.byte $00000000, $FF,$FF,$FF,$FF, $00,$00,$00,$00, $00,$00,$00, %01000000, $04 ; F9 ;
.byte $00000100, $0F,$FF,$FF,$FF, $99,$00,$00,$00, $08,$0B,$00, %01000100, $84 ; 7A ; 9-9 Pirates
.byte $00000000, $FF,$FF,$FF,$FF, $00,$00,$00,$00, $00,$00,$00, %01000100, $04 ; FA ;
.byte $00000111, $7F,$FF,$FF,$FF, $11,$00,$00,$00, $3E,$3F,$00, %00000100, $84 ; 7B ; 1-1 Chaos
.byte $00000000, $7F,$FF,$FF,$FF, $00,$00,$00,$00, $00,$00,$00, %00000000, $04 ; FB ;
.byte $11111100, $3C,$FF,$FF,$FF, $11,$00,$00,$00, $1F,$00,$00, %01000000, $84 ; 7C ; 1-1 Vampire (JIGS - boosted!)
.byte $00000000, $FF,$FF,$FF,$FF, $00,$00,$00,$00, $00,$00,$00, %00000000, $04 ; FC ;
.byte $00000100, $71,$FF,$FF,$FF, $11,$00,$00,$00, $06,$00,$00, %01000000, $84 ; 7D ; 1-1 Astos
.byte $00000000, $FF,$FF,$FF,$FF, $00,$00,$00,$00, $00,$00,$00, %01000000, $04 ; FD ;
.byte $00000000, $FF,$FF,$FF,$FF, $00,$00,$00,$00, $00,$00,$00, %01000000, $04 ; 7E ;
.byte $00000000, $0E,$0D,$FF,$FF, $12,$88,$00,$00, $08,$0B,$00, %01000100, $84 ; FE ; 1-2 WzSahag,  8-8 R.Sahag
.byte $00000000, $FF,$FF,$FF,$FF, $11,$00,$00,$00, $13,$2E,$00, %00010000, $04 ; 7F ;
.byte $00000010, $6E,$FF,$FF,$FF, $12,$00,$00,$00, $13,$2E,$00, %00010000, $04 ; FF ; 1-2 IronGol


;;
;; BATTLE DATA
;; +0   = bits 4-7: battle formation
;;                   0 = 9 small
;;                   1 = 4 large
;;                   2 = 2 large & 6 small
;;                   3 = Fiend
;;                   4 = Chaos
;;                   5 = Mini boss mix
;;                   6 = Mini boss 9 small
;;                   7 = Mini boss 4 large
;;        bits 0-3: graphics set
;; +1   = 2 bits per enemy to select picture from the graphics set
;; +2-5 = enemy index numbers
;; +6-9 = high/low nybble is min/max # of the enemy in formation 1
;; +A   = palette 0
;; +B   = palette 1
;; +C   = "surprise" factor
;; +D   = bit  0:   can't run flag
;;        bits 4-7: palettes for enemies
;; +E-F = high/low nybble is min/max # of the enemy in formation 2
;;    $0  $1         $2  $3  $4  $5   $6  $7  $8  $9  $A  $B  $C  $D   $E  $F    ; Formation 1
;.byte $00,%00000000, $00,$01,$FF,$FF, $35,$00,$00,$00,$00,$01,$04,$40, $36,$04  ; 00 ; 3-5 Imps
;.byte $00,%00000000, $00,$01,$FF,$FF, $35,$00,$00,$00,$00,$01,$04,$40, $36,$04  ; 80 ; 3-6 Imps       0-4 GrImps
;.byte $02,%00001000, $15,$18,$FF,$FF, $24,$00,$00,$00,$0C,$0C,$04,$00, $35,$02  ; 01 ; 2-4 Bones
;.byte $02,%00001000, $15,$18,$FF,$FF, $24,$00,$00,$00,$0C,$0C,$04,$00, $35,$02  ; 81 ; 3-5 Bones      0-2 Crawls
;.byte $00,%00101000, $01,$02,$03,$FF, $13,$02,$02,$02,$00,$01,$04,$A0, $13,$00  ; 02 ; 1-3 GrImps, 0-2 Wolves, 0-2 GrWolves, 0-2 Imps
;.byte $00,%00101000, $01,$02,$03,$FF, $13,$02,$02,$02,$00,$01,$04,$A0, $13,$00  ; 82 ; 1-3 GrImps
;.byte $00,%00001010, $02,$03,$FF,$FF, $12,$00,$00,$00,$00,$01,$04,$40, $46,$01  ; 03 ; 1-2 Wolves
;.byte $00,%00001010, $02,$03,$FF,$FF, $12,$00,$00,$00,$00,$01,$04,$40, $46,$01  ; 83 ; 4-6 Wolves     0-1 GrWolves
;.byte $04,%00001010, $2B,$2C,$FF,$FF, $24,$00,$00,$00,$16,$17,$04,$40, $23,$24  ; 04 ; 2-4 Zombies
;.byte $04,%00001010, $2B,$2C,$FF,$FF, $24,$00,$00,$00,$16,$17,$04,$40, $23,$24  ; 84 ; 2-3 Zombies    2-4 Ghouls
;.byte $07,%00000010, $49,$45,$FF,$FF, $12,$00,$00,$00,$1A,$21,$37,$40, $00,$24  ; 05 ; 1-2 Spiders
;.byte $07,%00000010, $49,$45,$FF,$FF, $12,$00,$00,$00,$1A,$21,$37,$40, $00,$24  ; 85 ; 2-4 Scum
;.byte $1C,%00000001, $74,$FF,$FF,$FF, $11,$00,$00,$00,$32,$32,$04,$00, $24,$00  ; 06 ;   1 Madpony
;.byte $1C,%00000001, $74,$FF,$FF,$FF, $11,$00,$00,$00,$32,$32,$04,$00, $24,$00  ; 86 ; 2-4 Madpony
;.byte $22,%00001110, $17,$1B,$FF,$FF, $12,$00,$00,$00,$0D,$0E,$04,$40, $13,$11  ; 07 ; 1-2 Creep
;.byte $22,%00001110, $17,$1B,$FF,$FF, $12,$00,$00,$00,$0D,$0E,$04,$40, $13,$11  ; 87 ; 1-3 Creep        1 Ogre
;.byte $04,%00001010, $2C,$2D,$FF,$FF, $11,$00,$00,$00,$17,$18,$04,$40, $25,$04  ; 08 ; 1-2 Ghoul
;.byte $04,%00001010, $2C,$2D,$FF,$FF, $11,$00,$00,$00,$17,$18,$04,$40, $25,$04  ; 88 ; 2-5 Ghoul      0-4 GEIST
;.byte $10,%00000111, $09,$06,$FF,$FF, $00,$11,$00,$00,$02,$01,$04,$40, $13,$02  ; 09 ;   1 Iguana
;.byte $10,%00000111, $09,$06,$FF,$FF, $00,$11,$00,$00,$02,$01,$04,$40, $13,$02  ; 89 ; 1-3 GIANT      0-2 IGUANA
;.byte $04,%00000000, $27,$FF,$FF,$FF, $24,$00,$00,$00,$1A,$1A,$5A,$00, $37,$00  ; 0A ; 2-4 Shadow
;.byte $04,%00000000, $27,$FF,$FF,$FF, $24,$00,$00,$00,$1A,$1A,$5A,$00, $37,$00  ; 8A ; 3-7 SHADOW
;.byte $00,%00001010, $03,$02,$FF,$FF, $25,$03,$00,$00,$00,$01,$04,$80, $48,$00  ; 0B ; 2-5 GrWolves, 0-3 Wolves
;.byte $00,%00001010, $03,$02,$FF,$FF, $25,$03,$00,$00,$00,$01,$04,$80, $48,$00  ; 8B ; 4-8 GrWolf
;.byte $12,%00000111, $1B,$19,$FF,$FF, $12,$00,$00,$00,$0E,$10,$04,$40, $13,$02  ; 0C ; 1-2 Ogre
;.byte $12,%00000111, $1B,$19,$FF,$FF, $12,$00,$00,$00,$0E,$10,$04,$40, $13,$02  ; 8C ; 1-3 OGRE       0-2 HYENA
;.byte $03,%00000000, $1E,$FF,$FF,$FF, $12,$00,$00,$00,$11,$11,$04,$00, $37,$00  ; 0D ; 1-2 Asp
;.byte $03,%00000000, $1E,$FF,$FF,$FF, $12,$00,$00,$00,$11,$11,$04,$00, $37,$00  ; 8D ; 3-7 ASP
;.byte $20,%00111000, $01,$04,$09,$FF, $05,$13,$02,$00,$01,$02,$21,$60, $25,$02  ; 0E ; 0-5 GrImp, 1-3 WrWolf, 0-2 Giant
;.byte $20,%00111000, $01,$04,$09,$FF, $05,$13,$02,$00,$01,$02,$21,$60, $25,$02  ; 8E ; 2-5 GrImp      0-2 WrWolf
;.byte $04,%00001010, $2E,$2D,$FF,$FF, $00,$14,$00,$00,$18,$19,$04,$80, $25,$25  ; 0F ; 1-4 Specter
;.byte $04,%00001010, $2E,$2D,$FF,$FF, $00,$14,$00,$00,$18,$19,$04,$80, $25,$25  ; 8F ; 2-5 SPECTER    2-5 GEIST
;.byte $06,%00000010, $3E,$FF,$FF,$FF, $23,$00,$00,$00,$1F,$1F,$04,$00, $38,$00  ; 10 ; 2-3 Gargoyle
;.byte $06,%00000010, $3E,$FF,$FF,$FF, $23,$00,$00,$00,$1F,$1F,$04,$00, $38,$00  ; 90 ; 3-8 GARGOYLE
;.byte $00,%00001010, $04,$03,$FF,$FF, $36,$00,$00,$00,$01,$02,$21,$80, $25,$05  ; 11 ; 3-6 WrWolf
;.byte $00,%00001010, $04,$03,$FF,$FF, $36,$00,$00,$00,$01,$02,$21,$80, $25,$05  ; 91 ; 2-5 WrWolf     0-5 GrWolf
;.byte $07,%00001000, $47,$4A,$FF,$FF, $00,$14,$00,$00,$21,$22,$37,$80, $25,$05  ; 12 ; 1-4 Ooze
;.byte $07,%00001000, $47,$4A,$FF,$FF, $00,$14,$00,$00,$21,$22,$37,$80, $25,$05  ; 92 ; 2-5 OOZE       0-5 ARACHNID
;.byte $12,%00001111, $1C,$1B,$FF,$FF, $11,$12,$00,$00,$0E,$0F,$04,$80, $14,$02  ; 13 ;   1 GrOgre, 1-2 Ogre
;.byte $12,%00001111, $1C,$1B,$FF,$FF, $11,$12,$00,$00,$0E,$0F,$04,$80, $14,$02  ; 93 ; 1-4 GrOGRE     0-2 OGRE
;.byte $07,%00000010, $4A,$FF,$FF,$FF, $12,$00,$00,$00,$21,$21,$04,$00, $48,$00  ; 14 ; 1-2 Arachnid
;.byte $07,%00000010, $4A,$FF,$FF,$FF, $12,$00,$00,$00,$21,$21,$04,$00, $48,$00  ; 94 ; 4-8 ARACHNID
;.byte $03,%00001000, $1F,$21,$FF,$FF, $26,$00,$00,$00,$12,$15,$04,$40, $26,$04  ; 15 ; 2-6 Cobra
;.byte $03,%00001000, $1F,$21,$FF,$FF, $26,$00,$00,$00,$12,$15,$04,$40, $26,$04  ; 95 ; 2-6 COBRA      0-4 SCORPION
;.byte $08,%00000010, $51,$4F,$FF,$FF, $26,$00,$00,$00,$25,$26,$04,$80, $26,$15  ; 16 ; 2-6 Coctrice
;.byte $08,%00000010, $51,$4F,$FF,$FF, $26,$00,$00,$00,$25,$26,$04,$80, $26,$15  ; 96 ; 2-6 COCTRICE   1-5 MUMMY
;.byte $15,%00000001, $38,$FF,$FF,$FF, $14,$00,$00,$00,$15,$15,$04,$00, $16,$00  ; 17 ; 1-4 Pede
;.byte $15,%00000001, $38,$FF,$FF,$FF, $14,$00,$00,$00,$15,$15,$04,$00, $16,$00  ; 97 ; 1-6 PEDE
;.byte $04,%00000000, $28,$29,$FF,$FF, $26,$00,$00,$00,$18,$19,$04,$40, $26,$04  ; 18 ; 2-6 Image
;.byte $04,%00000000, $28,$29,$FF,$FF, $26,$00,$00,$00,$18,$19,$04,$40, $26,$04  ; 98 ; 2-6 IMAGE      0-4 WRAITH
;.byte $15,%00001111, $3B,$3A,$FF,$FF, $00,$13,$00,$00,$1A,$1D,$1B,$40, $13,$02  ; 19 ; 1-3 Tiger
;.byte $15,%00001111, $3B,$3A,$FF,$FF, $00,$13,$00,$00,$1A,$1D,$1B,$40, $13,$02  ; 99 ; 1-3 Saber T    0-2 TIGER
;.byte $23,%00000110, $21,$23,$FF,$FF, $24,$00,$00,$00,$11,$15,$1B,$80, $26,$12  ; 1A ; 2-4 Scorpion
;.byte $23,%00000110, $21,$23,$FF,$FF, $24,$00,$00,$00,$11,$15,$1B,$80, $26,$12  ; 9A ; 2-6 SCORPION   1-2 BULL
;.byte $13,%00000111, $25,$23,$FF,$FF, $12,$01,$00,$00,$11,$12,$1B,$80, $12,$02  ; 1B ; 1-2 Troll, 0-1 Bull
;.byte $13,%00000111, $25,$23,$FF,$FF, $12,$01,$00,$00,$11,$12,$1B,$80, $12,$02  ; 9B ; 1-2 TROLL      0-2 BULL
;.byte $0B,%00000000, $67,$FF,$FF,$FF, $24,$00,$00,$00,$32,$32,$21,$01, $37,$00  ; 1C ; 2-4 Wizard
;.byte $0B,%00000000, $67,$FF,$FF,$FF, $24,$00,$00,$00,$32,$32,$21,$01, $37,$00  ; 9C ; 3-7 WIZARD
;.byte $08,%00000000, $4F,$50,$FF,$FF, $25,$00,$00,$00,$25,$26,$04,$40, $37,$11  ; 1D ; 2-5 Mummy
;.byte $08,%00000000, $4F,$50,$FF,$FF, $25,$00,$00,$00,$25,$26,$04,$40, $37,$11  ; 9D ; 3-7 MUMMY        1 WzMUMMY
;.byte $10,%00000011, $09,$FF,$FF,$FF, $12,$00,$00,$00,$02,$02,$04,$00, $24,$00  ; 1E ; 1-2 Giant
;.byte $10,%00000011, $09,$FF,$FF,$FF, $12,$00,$00,$00,$02,$02,$04,$00, $24,$00  ; 9E ; 2-4 GIANT
;.byte $10,%00000111, $09,$06,$FF,$FF, $12,$03,$00,$00,$01,$02,$04,$80, $14,$11  ; 1F ; 1-2 Giant, 0-3 Iguana
;.byte $10,%00000111, $09,$06,$FF,$FF, $12,$03,$00,$00,$01,$02,$04,$80, $14,$11  ; 9F ; 1-4 GIANT        1 IGUANA
;.byte $29,%00001011, $5D,$59,$FF,$FF, $12,$00,$00,$00,$2A,$2B,$1B,$40, $14,$03  ; 20 ; 1-2 Hydra
;.byte $29,%00001011, $5D,$59,$FF,$FF, $12,$00,$00,$00,$2A,$2B,$1B,$40, $14,$03  ; A0 ; 1-4 HYDRA      0-3 GATOR
;.byte $16,%00000001, $40,$FF,$FF,$FF, $11,$00,$00,$00,$1C,$1C,$04,$01, $24,$00  ; 21 ;   1 Earth
;.byte $16,%00000001, $40,$FF,$FF,$FF, $11,$00,$00,$00,$1C,$1C,$04,$01, $24,$00  ; A1 ; 2-4 EARTH
;.byte $12,%00001101, $1A,$1D,$FF,$FF, $01,$12,$00,$00,$0D,$10,$37,$41, $13,$02  ; 22 ; 0-1 Cerebus, 1-2 WzOgre
;.byte $12,%00001101, $1A,$1D,$FF,$FF, $01,$12,$00,$00,$0D,$10,$37,$41, $13,$02  ; A2 ; 1-3 CEREBUS    0-2 WzOGRE
;.byte $08,%00000010, $52,$FF,$FF,$FF, $25,$00,$00,$00,$25,$25,$04,$00, $48,$00  ; 23 ; 2-5 Perelisk
;.byte $08,%00000010, $52,$FF,$FF,$FF, $25,$00,$00,$00,$25,$25,$04,$00, $48,$00  ; A3 ; 4-8 PERILISK
;.byte $19,%00000011, $5E,$FF,$FF,$FF, $11,$00,$00,$00,$03,$03,$04,$00, $44,$00  ; 24 ;   1 R. Hydra
;.byte $19,%00000011, $5E,$FF,$FF,$FF, $11,$00,$00,$00,$03,$03,$04,$00, $44,$00  ; A4 ; 4-4 R`HYDRA
;.byte $29,%00000001, $5B,$57,$FF,$FF, $13,$00,$00,$00,$2A,$2B,$21,$80, $11,$02  ; 25 ; 1-3 Ocho
;.byte $29,%00000001, $5B,$57,$FF,$FF, $13,$00,$00,$00,$2A,$2B,$21,$80, $11,$02  ; A5 ; 1-1 OCHO       0-2 CARIBE
;.byte $10,%00000111, $0B,$07,$FF,$FF, $12,$00,$00,$00,$03,$03,$04,$00, $11,$13  ; 26 ; 1-2 R. Giant
;.byte $10,%00000111, $0B,$07,$FF,$FF, $12,$00,$00,$00,$03,$03,$04,$00, $11,$13  ; A6 ; 1-1 R`GIANT    1-3 AGAMA
;.byte $16,%00000001, $41,$FF,$FF,$FF, $12,$00,$00,$00,$03,$03,$04,$01, $34,$00  ; 27 ; 1-2 Fire
;.byte $16,%00000001, $41,$FF,$FF,$FF, $12,$00,$00,$00,$03,$03,$04,$01, $34,$00  ; A7 ; 3-4 FIRE
;.byte $14,%00000001, $31,$FF,$FF,$FF, $11,$00,$00,$00,$19,$19,$04,$00, $24,$00  ; 28 ;   1 Grey W.
;.byte $14,%00000001, $31,$FF,$FF,$FF, $11,$00,$00,$00,$19,$19,$04,$00, $24,$00  ; A8 ; 2-4 Grey W
;.byte $10,%00000001, $07,$FF,$FF,$FF, $11,$00,$00,$00,$03,$03,$04,$00, $24,$00  ; 29 ;   1 Agama
;.byte $10,%00000001, $07,$FF,$FF,$FF, $11,$00,$00,$00,$03,$03,$04,$00, $24,$00  ; A9 ; 2-4 AGAMA
;.byte $16,%00000011, $43,$FF,$FF,$FF, $11,$00,$00,$00,$0D,$0D,$04,$00, $24,$00  ; 2A ;   1 Red D.
;.byte $16,%00000011, $43,$FF,$FF,$FF, $11,$00,$00,$00,$0D,$0D,$04,$00, $24,$00  ; AA ; 2-4 Red D
;.byte $02,%00100000, $16,$15,$18,$FF, $11,$24,$11,$00,$0C,$0D,$04,$80, $36,$00  ; 2B ;   1 R. Bone, 2-4 Bone, 1 Crawl
;.byte $02,%00100000, $16,$15,$18,$FF, $11,$24,$11,$00,$0C,$0D,$04,$80, $36,$00  ; AB ; 3-6 R`BONE
;.byte $04,%10100000, $29,$28,$2E,$2D, $15,$03,$03,$03,$18,$19,$04,$A0, $26,$00  ; 2C ; 1-5 Wraith, 0-3 Image, 0-3 Specter, 0-3 Geist
;.byte $04,%10100000, $29,$28,$2E,$2D, $15,$03,$03,$03,$18,$19,$04,$A0, $26,$00  ; AC ; 2-6 WRAITH
;.byte $00,%00000010, $05,$FF,$FF,$FF, $37,$00,$00,$00,$04,$04,$04,$00, $47,$00  ; 2D ; 3-7 FrWolf
;.byte $00,%00000010, $05,$FF,$FF,$FF, $37,$00,$00,$00,$04,$04,$04,$00, $47,$00  ; AD ; 4-7 FrWOLF
;.byte $20,%00001011, $0A,$05,$FF,$FF, $11,$02,$00,$00,$04,$04,$04,$01, $22,$26  ; 2E ;   1 FrGiant, 0-2 FrWolf
;.byte $20,%00001011, $0A,$05,$FF,$FF, $11,$02,$00,$00,$04,$04,$04,$01, $22,$26  ; AE ; 2-2 FrGIANT    2-6 FrWOLF
;.byte $0C,%00001010, $72,$73,$FF,$FF, $14,$00,$00,$00,$24,$2E,$4B,$40, $23,$11  ; 2F ; 1-4 Mage
;.byte $0C,%00001010, $72,$73,$FF,$FF, $14,$00,$00,$00,$24,$2E,$4B,$40, $23,$11  ; AF ; 2-3 MAGE         1 FIGHTER
;.byte $16,%00000011, $42,$FF,$FF,$FF, $12,$00,$00,$00,$07,$07,$04,$00, $34,$00  ; 30 ; 1-2 Frost D.
;.byte $16,%00000011, $42,$FF,$FF,$FF, $12,$00,$00,$00,$07,$07,$04,$00, $34,$00  ; B0 ; 3-4 Frost D
;.byte $15,%00000001, $39,$FF,$FF,$FF, $11,$00,$00,$00,$0C,$0C,$04,$00, $12,$00  ; 31 ;   1 GrPede
;.byte $15,%00000001, $39,$FF,$FF,$FF, $11,$00,$00,$00,$0C,$0C,$04,$00, $12,$00  ; B1 ; 1-2 GrPEDE
;.byte $13,%00001101, $24,$25,$FF,$FF, $13,$00,$00,$00,$12,$16,$04,$81, $14,$02  ; 32 ; 1-3 ZomBull
;.byte $13,%00001101, $24,$25,$FF,$FF, $13,$00,$00,$00,$12,$16,$04,$81, $14,$02  ; B2 ; 1-4 ZomBULL    0-2 TROLL
;.byte $05,%00000010, $37,$34,$FF,$FF, $35,$00,$00,$00,$0E,$1E,$04,$80, $37,$05  ; 33 ; 3-5 Mancat
;.byte $05,%00000010, $37,$34,$FF,$FF, $35,$00,$00,$00,$0E,$1E,$04,$80, $37,$05  ; B3 ; 3-7 MANCAT     0-5 MEDUSA
;.byte $25,%00001100, $34,$3B,$FF,$FF, $25,$00,$00,$00,$0E,$1A,$1B,$40, $36,$12  ; 34 ; 2-5 Medusa
;.byte $25,%00001100, $34,$3B,$FF,$FF, $25,$00,$00,$00,$0E,$1A,$1B,$40, $36,$12  ; B4 ; 3-6 MEDUSA     1-2 Saber T
;.byte $2B,%00001100, $68,$6C,$FF,$FF, $25,$00,$00,$00,$33,$34,$04,$40, $16,$12  ; 35 ; 2-5 Sorcerer
;.byte $2B,%00001100, $68,$6C,$FF,$FF, $25,$00,$00,$00,$33,$34,$04,$40, $16,$12  ; B5 ; 1-6 SORCERER   1-2 MudGOL
;.byte $17,%00000001, $4B,$FF,$FF,$FF, $13,$00,$00,$00,$1D,$1D,$04,$00, $34,$00  ; 36 ; 1-3 Manticor
;.byte $17,%00000001, $4B,$FF,$FF,$FF, $13,$00,$00,$00,$1D,$1D,$04,$00, $34,$00  ; B6 ; 3-4 MATICOR
;.byte $18,%00000001, $54,$FF,$FF,$FF, $13,$00,$00,$00,$27,$27,$04,$00, $13,$00  ; 37 ; 1-3 Wyrm
;.byte $18,%00000001, $54,$FF,$FF,$FF, $13,$00,$00,$00,$27,$27,$04,$00, $13,$00  ; B7 ; 1-3 WYRM
;.byte $17,%00000011, $4D,$FF,$FF,$FF, $13,$00,$00,$00,$22,$22,$04,$00, $14,$00  ; 38 ; 1-3 R. Ankylo
;.byte $17,%00000011, $4D,$FF,$FF,$FF, $13,$00,$00,$00,$22,$22,$04,$00, $14,$00  ; B8 ; 1-4 R`ANKYLO
;.byte $25,%00001110, $36,$3B,$FF,$FF, $24,$00,$00,$00,$1A,$1D,$1B,$80, $36,$12  ; 39 ; 2-4 Catman
;.byte $25,%00001110, $36,$3B,$FF,$FF, $24,$00,$00,$00,$1A,$1D,$1B,$80, $36,$12  ; B9 ; 3-6 CATMAN     1-2 Saber T
;.byte $10,%00000001, $08,$FF,$FF,$FF, $12,$00,$00,$00,$05,$05,$1B,$00, $24,$00  ; 3A ; 1-2 Sauria
;.byte $10,%00000001, $08,$FF,$FF,$FF, $12,$00,$00,$00,$05,$05,$1B,$00, $24,$00  ; BA ; 2-4 SAURIA
;.byte $1A,%00000011, $65,$FF,$FF,$FF, $13,$00,$00,$00,$30,$30,$04,$00, $34,$00  ; 3B ; 1-3 Chimera
;.byte $1A,%00000011, $65,$FF,$FF,$FF, $13,$00,$00,$00,$30,$30,$04,$00, $34,$00  ; BB ; 3-4 CHIMERA
;.byte $14,%00000001, $30,$FF,$FF,$FF, $11,$00,$00,$00,$1C,$1C,$04,$00, $12,$00  ; 3C ;   1 Sand W.
;.byte $14,%00000001, $30,$FF,$FF,$FF, $11,$00,$00,$00,$1C,$1C,$04,$00, $12,$00  ; BC ; 1-2 Sand W
;.byte $18,%00000111, $55,$53,$FF,$FF, $11,$00,$00,$00,$28,$29,$04,$80, $11,$01  ; 3D ;   1 Tyro
;.byte $18,%00000111, $55,$53,$FF,$FF, $11,$00,$00,$00,$28,$29,$04,$80, $11,$01  ; BD ; 1-1 TYRO       0-1 WYVERN
;.byte $18,%00110101, $53,$54,$56,$FF, $00,$00,$11,$00,$27,$28,$04,$A0, $13,$05  ; 3E ;   1 T-Rex
;.byte $18,%00110101, $53,$54,$56,$FF, $00,$00,$11,$00,$27,$28,$04,$A0, $13,$05  ; BE ; 1-3 WYVERN     0-5 WYRM
;.byte $1B,%00001111, $6C,$6D,$FF,$FF, $13,$00,$00,$00,$34,$35,$04,$40, $14,$13  ; 3F ; 1-3 MudGol
;.byte $1B,%00001111, $6C,$6D,$FF,$FF, $13,$00,$00,$00,$34,$35,$04,$40, $14,$13  ; BF ; 1-4 MudGOL     1-3 RockGOL
;.byte $05,%00000000, $35,$FF,$FF,$FF, $14,$00,$00,$00,$0F,$0F,$04,$00, $47,$00  ; 40 ; 1-4 GrMedusa
;.byte $05,%00000000, $35,$FF,$FF,$FF, $14,$00,$00,$00,$0F,$0F,$04,$00, $47,$00  ; C0 ; 4-7 GrMEDUSA
;.byte $19,%00000001, $5C,$FF,$FF,$FF, $11,$00,$00,$00,$2C,$2C,$21,$00, $12,$00  ; 41 ;   1 Naocho
;.byte $19,%00000001, $5C,$FF,$FF,$FF, $11,$00,$00,$00,$2C,$2C,$21,$00, $12,$00  ; C1 ; 1-2 NAOCHO
;.byte $23,%00001011, $26,$22,$FF,$FF, $12,$13,$00,$00,$13,$14,$04,$80, $12,$14  ; 42 ; 1-2 SeaTroll, 1-3 Lobsters
;.byte $23,%00001011, $26,$22,$FF,$FF, $12,$13,$00,$00,$13,$14,$04,$80, $12,$14  ; C2 ; 1-2 SeaTROLL   1-4 LOBSTER
;.byte $03,%00000010, $22,$FF,$FF,$FF, $26,$00,$00,$00,$13,$13,$04,$00, $37,$00  ; 43 ; 2-6 Lobsters
;.byte $03,%00000010, $22,$FF,$FF,$FF, $26,$00,$00,$00,$13,$13,$04,$00, $37,$00  ; C3 ; 3-7 LOBSTER
;.byte $23,%00110010, $22,$20,$26,$FF, $16,$25,$22,$00,$13,$14,$04,$20, $15,$03  ; 44 ; 1-6 Lobsters, 2-5 SeaSnakes, 2 SeaTrolls
;.byte $23,%00110010, $22,$20,$26,$FF, $16,$25,$22,$00,$13,$14,$04,$20, $15,$03  ; C4 ; 1-5 LOBSTER    0-3 SeaSNAKE
;.byte $21,%00000100, $0E,$12,$FF,$FF, $01,$12,$00,$00,$07,$0B,$04,$80, $36,$22  ; 45 ; 0-1 WzSahag, 1-2 GrShark
;.byte $21,%00000100, $0E,$12,$FF,$FF, $01,$12,$00,$00,$07,$0B,$04,$80, $36,$22  ; C5 ; 3-6 WzSAHAG    2-2 GrSHARK
;.byte $24,%00001100, $2A,$33,$FF,$FF, $00,$11,$00,$00,$07,$16,$04,$41, $25,$00  ; 46 ;   1 Phantom
;.byte $24,%00001100, $2A,$33,$FF,$FF, $00,$11,$00,$00,$07,$16,$04,$41, $25,$00  ; C6 ; 2-5 GHOST
;.byte $2A,%00001001, $63,$61,$FF,$FF, $11,$01,$00,$00,$13,$13,$04,$00, $12,$36  ; 47 ;   1 Naga, 0-1 Water
;.byte $2A,%00001001, $63,$61,$FF,$FF, $11,$01,$00,$00,$13,$13,$04,$00, $12,$36  ; C7 ; 1-2 NAGA       3-6 WATER
;.byte $11,%00001101, $12,$14,$FF,$FF, $11,$01,$00,$00,$07,$09,$04,$40, $12,$12  ; 48 ;   1 GrShark, 0-1 BigEye
;.byte $11,%00001101, $12,$14,$FF,$FF, $11,$01,$00,$00,$07,$09,$04,$40, $12,$12  ; C8 ; 1-2 GrSHARK    1-2 BigEYE
;.byte $0A,%00000010, $61,$FF,$FF,$FF, $13,$00,$00,$00,$13,$13,$04,$01, $36,$00  ; 49 ; 1-3 Water
;.byte $0A,%00000010, $61,$FF,$FF,$FF, $13,$00,$00,$00,$13,$13,$04,$01, $36,$00  ; C9 ; 3-6 WATER
;.byte $08,%10100000, $50,$4F,$51,$52, $15,$08,$08,$08,$25,$26,$04,$A0, $12,$16  ; 4A ; 1-5 WzMummy, 0-8 Mummy, 0-8 Coctrice, 0-8 Perelisk
;.byte $08,%10100000, $50,$4F,$51,$52, $15,$08,$08,$08,$25,$26,$04,$A0, $12,$16  ; CA ; 1-2 WzMUMMY    1-6 MUMMY
;.byte $16,%00000011, $44,$FF,$FF,$FF, $12,$00,$00,$00,$16,$16,$04,$01, $24,$00  ; 4B ; 1-2 Zombie Dragons
;.byte $16,%00000011, $44,$FF,$FF,$FF, $12,$00,$00,$00,$16,$16,$04,$01, $24,$00  ; CB ; 2-4 ZombieD
;.byte $0A,%00000000, $5F,$60,$FF,$FF, $25,$00,$00,$00,$2E,$2F,$04,$40, $01,$11  ; 4C ; 2-5 Guards
;.byte $0A,%00000000, $5F,$60,$FF,$FF, $25,$00,$00,$00,$2E,$2F,$04,$40, $01,$11  ; CC ; 0-1 GAURD      1-1 SENTRY
;.byte $0C,%00000000, $6F,$FF,$FF,$FF, $25,$00,$00,$00,$24,$24,$04,$00, $59,$00  ; 4D ; 2-5 Badman
;.byte $0C,%00000000, $6F,$FF,$FF,$FF, $25,$00,$00,$00,$24,$24,$04,$00, $59,$00  ; CD ; 5-9 BADMAN
;.byte $1B,%00000001, $6B,$FF,$FF,$FF, $11,$00,$00,$00,$14,$14,$04,$01, $23,$00  ; 4E ;   1 Blue D.
;.byte $1B,%00000001, $6B,$FF,$FF,$FF, $11,$00,$00,$00,$14,$14,$04,$01, $23,$00  ; CE ; 2-3 Blue D
;.byte $2C,%00000001, $75,$6F,$FF,$FF, $13,$00,$00,$00,$24,$33,$04,$80, $12,$12  ; 4F ; 1-3 NiteMare
;.byte $2C,%00000001, $75,$6F,$FF,$FF, $13,$00,$00,$00,$24,$33,$04,$80, $12,$12  ; CF ; 1-2 NITEMARE   1-2 BADMAN
;.byte $07,%00000000, $48,$FF,$FF,$FF, $36,$00,$00,$00,$24,$24,$04,$00, $48,$00  ; 50 ; 3-6 Slime
;.byte $07,%00000000, $48,$FF,$FF,$FF, $36,$00,$00,$00,$24,$24,$04,$00, $48,$00  ; D0 ; 4-8 SLIME
;.byte $0A,%00000010, $62,$FF,$FF,$FF, $24,$00,$00,$00,$04,$04,$04,$00, $36,$00  ; 51 ; 2-4 Air
;.byte $0A,%00000010, $62,$FF,$FF,$FF, $24,$00,$00,$00,$04,$04,$04,$00, $36,$00  ; D1 ; 3-6 AIR
;.byte $2A,%00001001, $64,$62,$FF,$FF, $11,$01,$00,$00,$04,$2D,$04,$80, $01,$13  ; 52 ;   1 GrNaga, 0-1 Air
;.byte $2A,%00001001, $64,$62,$FF,$FF, $11,$01,$00,$00,$04,$2D,$04,$80, $01,$13  ; D2 ; 0-1 GrNAGA     1-3 AIR
;.byte $26,%00001100, $3D,$44,$FF,$FF, $13,$00,$00,$00,$16,$20,$04,$80, $13,$12  ; 53 ; 1-3 WzVamp
;.byte $26,%00001100, $3D,$44,$FF,$FF, $13,$00,$00,$00,$16,$20,$04,$80, $13,$12  ; D3 ; 1-3 WzVAMP     1-2 ZombieD
;.byte $2C,%00000100, $70,$75,$FF,$FF, $11,$12,$00,$00,$17,$33,$04,$40, $12,$12  ; 54 ;   1 Evilman, 1-2 Nitemare
;.byte $2C,%00000100, $70,$75,$FF,$FF, $11,$12,$00,$00,$17,$33,$04,$40, $12,$12  ; D4 ; 1-2 EVILMAN    1-2 NITEMARE
;.byte $1A,%00001111, $65,$66,$FF,$FF, $12,$12,$00,$00,$30,$31,$04,$40, $11,$00  ; 55 ; 1-2 Chimera, 1-2 Jimera
;.byte $1A,%00001111, $65,$66,$FF,$FF, $12,$12,$00,$00,$30,$31,$04,$40, $11,$00  ; D5 ; 1-1 CHIMERA
;.byte $2C,%00001011, $76,$73,$FF,$FF, $11,$00,$00,$00,$2E,$2F,$4B,$80, $00,$12  ; 56 ;   1 WarMech
;.byte $2C,%00001011, $76,$73,$FF,$FF, $11,$00,$00,$00,$2E,$2F,$4B,$80, $00,$12  ; D6 ; 1-2 FIGHTER
;.byte $14,%00000001, $2F,$FF,$FF,$FF, $12,$00,$00,$00,$1B,$1B,$04,$01, $34,$00  ; 57 ; 1-2 Worm
;.byte $14,%00000001, $2F,$FF,$FF,$FF, $12,$00,$00,$00,$1B,$1B,$04,$01, $34,$00  ; D7 ; 3-4 WORM
;.byte $1B,%00000011, $6D,$FF,$FF,$FF, $12,$00,$00,$00,$35,$35,$04,$00, $24,$00  ; 58 ; 1-2 RockGol
;.byte $1B,%00000011, $6D,$FF,$FF,$FF, $12,$00,$00,$00,$35,$35,$04,$00, $24,$00  ; D8 ; 2-4 RockGOL
;.byte $1B,%00000001, $6A,$FF,$FF,$FF, $11,$00,$00,$00,$21,$21,$04,$01, $24,$00  ; 59 ;   1 Gas D.
;.byte $1B,%00000001, $6A,$FF,$FF,$FF, $11,$00,$00,$00,$21,$21,$04,$01, $24,$00  ; D9 ; 2-4 Gas D
;.byte $11,%00000101, $12,$11,$FF,$FF, $12,$01,$00,$00,$07,$09,$04,$40, $12,$01  ; 5A ; 1-2 GrShark, 0-1 Shark
;.byte $11,%00000101, $12,$11,$FF,$FF, $12,$01,$00,$00,$07,$09,$04,$40, $12,$01  ; DA ; 1-2 GrSHARK    0-1 SHARK
;.byte $21,%00110000, $0C,$0D,$13,$FF, $06,$00,$12,$00,$08,$09,$04,$80, $37,$02  ; 5B ; 0-6 Sahag, 1-2 R.Sahag
;.byte $21,%00110000, $0C,$0D,$13,$FF, $06,$00,$12,$00,$08,$09,$04,$80, $37,$02  ; DB ; 3-7 SAHAG      0-2 R`SAHAG
;.byte $21,%00000110, $10,$11,$00,$FF, $15,$00,$00,$00,$09,$0A,$04,$80, $00,$11  ; 5C ; 1-5 Kyzoku
;.byte $21,%00000110, $10,$11,$00,$FF, $15,$00,$00,$00,$09,$0A,$04,$80, $00,$11  ; DC ; 1-1 SHARK
;.byte $21,%00000001, $11,$0C,$00,$FF, $12,$02,$00,$00,$08,$09,$04,$C0, $00,$46  ; 5D ; 1-2 Shark, 0-2 Sahag
;.byte $21,%00000001, $11,$0C,$00,$FF, $12,$02,$00,$00,$08,$09,$04,$C0, $00,$46  ; DD ; 4-6 SAHAG
;.byte $21,%00000001, $11,$0D,$00,$FF, $11,$01,$00,$00,$08,$09,$04,$80, $12,$03  ; 5E ;   1 Shark, 0-1 R.Sahag
;.byte $21,%00000001, $11,$0D,$00,$FF, $11,$01,$00,$00,$08,$09,$04,$80, $12,$03  ; DE ; 1-2 SHARK      0-3 R`SAHAG
;.byte $09,%00000000, $57,$FF,$00,$FF, $26,$00,$00,$00,$2A,$2A,$04,$00, $38,$00  ; 5F ; 2-6 Caribe
;.byte $09,%00000000, $57,$FF,$00,$FF, $26,$00,$00,$00,$2A,$2A,$04,$00, $38,$00  ; DF ; 3-8 CARIBE
;.byte $19,%00000111, $5D,$5B,$00,$FF, $12,$02,$00,$00,$2A,$2B,$21,$40, $11,$01  ; 60 ; 1-2 Hydra, 0-2 Ocho
;.byte $19,%00000111, $5D,$5B,$00,$FF, $12,$02,$00,$00,$2A,$2B,$21,$40, $11,$01  ; E0 ; 1-1 HYDRA      0-1 OCHO
;.byte $23,%00100011, $26,$20,$22,$FF, $12,$02,$02,$00,$13,$14,$04,$80, $11,$03  ; 61 ; 1-2 SeaTroll, 0-2 SeaSnake, 0-2 Lobsters
;.byte $23,%00100011, $26,$20,$22,$FF, $12,$02,$02,$00,$13,$14,$04,$80, $11,$03  ; E1 ; 1-1 SeaTROLL   0-3 SeaSNAKE
;.byte $09,%00000010, $5A,$58,$00,$FF, $12,$03,$00,$00,$2C,$2D,$04,$80, $11,$14  ; 62 ; 1-2 FrGator, 0-3 R.Caribe
;.byte $09,%00000010, $5A,$58,$00,$FF, $12,$03,$00,$00,$2C,$2D,$04,$80, $11,$14  ; E2 ; 1-1 FrGATOR    1-4 R`CARIBE
;.byte $13,%00000011, $25,$FF,$00,$FF, $12,$00,$00,$00,$12,$12,$04,$00, $24,$00  ; 63 ; 1-2 Troll
;.byte $13,%00000011, $25,$FF,$00,$FF, $12,$00,$00,$00,$12,$12,$04,$00, $24,$00  ; E3 ; 2-4 TROLL
;.byte $13,%00000001, $23,$FF,$00,$FF, $12,$00,$00,$00,$11,$11,$1B,$00, $24,$00  ; 64 ; 1-2 Bull
;.byte $13,%00000001, $23,$FF,$00,$FF, $12,$00,$00,$00,$11,$11,$1B,$00, $24,$00  ; E4 ; 2-4 BULL
;.byte $29,%00011000, $57,$59,$5B,$FF, $02,$02,$11,$00,$2A,$2B,$1E,$60, $24,$02  ; 65 ; 0-2 Caribe, 0-2 Gator, 1 Ocho
;.byte $29,%00011000, $57,$59,$5B,$FF, $02,$02,$11,$00,$2A,$2B,$1E,$60, $24,$02  ; E5 ; 2-4 CARIBE     0-2 GATOR
;.byte $07,%00001010, $4A,$49,$45,$46, $12,$02,$01,$01,$1A,$21,$37,$A0, $36,$02  ; 66 ; 1-2 Arachnid, 0-1 Spider, 0-1 Scum, 0-1 Muck
;.byte $07,%00001010, $4A,$49,$45,$46, $12,$02,$01,$01,$1A,$21,$37,$A0, $36,$02  ; E6 ; 3-6 ARACHNID   0-2 SPIDER
;.byte $25,%00001110, $36,$3B,$FF,$FF, $13,$02,$00,$00,$1A,$1D,$1B,$80, $47,$00  ; 67 ; 1-3 Catman, 0-2 Saber T
;.byte $25,%00001110, $36,$3B,$FF,$FF, $13,$02,$00,$00,$1A,$1D,$1B,$80, $47,$00  ; E7 ; 4-7 CATMAN
;.byte $06,%00000000, $3D,$3C,$FF,$FF, $00,$25,$00,$00,$1F,$20,$04,$80, $11,$36  ; 68 ; 2-5 WzVamp
;.byte $06,%00000000, $3D,$3C,$FF,$FF, $00,$25,$00,$00,$1F,$20,$04,$80, $11,$36  ; E8 ; 1-1 WzVAMP     3-6 VAMPIRE
;.byte $24,%00000011, $32,$FF,$FF,$FF, $11,$00,$00,$00,$17,$17,$04,$01, $23,$00  ; 69 ;   1 Eye
;.byte $24,%00000011, $32,$FF,$FF,$FF, $11,$00,$00,$00,$17,$17,$04,$01, $23,$00  ; E9 ; 2-3 EYE
;.byte $06,%00000010, $3F,$FF,$FF,$FF, $25,$00,$00,$00,$20,$20,$04,$00, $37,$00  ; 6A ; 2-5 R.Goyle
;.byte $06,%00000010, $3F,$FF,$FF,$FF, $25,$00,$00,$00,$20,$20,$04,$00, $37,$00  ; EA ; 3-7 R`GOYLE
;.byte $07,%00000000, $46,$FF,$FF,$FF, $13,$00,$00,$00,$1A,$1A,$04,$00, $47,$00  ; 6B ; 1-3 Muck
;.byte $07,%00000000, $46,$FF,$FF,$FF, $13,$00,$00,$00,$1A,$1A,$04,$00, $47,$00  ; EB ; 4-7 MUCK
;.byte $0B,%00000000, $68,$FF,$FF,$FF, $13,$00,$00,$00,$33,$33,$04,$00, $37,$00  ; 6C ; 1-3 Sorcerer
;.byte $0B,%00000000, $68,$FF,$FF,$FF, $13,$00,$00,$00,$33,$33,$04,$00, $37,$00  ; EC ; 3-7 SORCERER
;.byte $12,%00000001, $1A,$FF,$FF,$FF, $12,$00,$00,$00,$0D,$0D,$37,$00, $34,$00  ; 6D ; 1-2 Cerebus
;.byte $12,%00000001, $1A,$FF,$FF,$FF, $12,$00,$00,$00,$0D,$0D,$37,$00, $34,$00  ; ED ; 3-4 CEREBUS
;.byte $12,%00011111, $1D,$1C,$19,$FF, $11,$11,$02,$00,$0F,$10,$04,$A0, $13,$02  ; 6E ;   1 WzOgre, 1 GrOgre, 0-7 Hyena (bug? changed to 0-2)
;.byte $12,%00011111, $1D,$1C,$19,$FF, $11,$11,$02,$00,$0F,$10,$04,$A0, $13,$02  ; EE ; 1-3 WzOGRE     0-2 GrOGRE
;.byte $17,%00000001, $4C,$FF,$FF,$FF, $12,$00,$00,$00,$23,$23,$04,$00, $14,$00  ; 6F ; 1-2 Sphinxes
;.byte $17,%00000001, $4C,$FF,$FF,$FF, $12,$00,$00,$00,$23,$23,$04,$00, $14,$00  ; EF ; 1-4 Sphinxes
;.byte $18,%00000001, $53,$FF,$FF,$FF, $13,$00,$00,$00,$28,$28,$04,$00, $14,$00  ; 70 ; 1-3 Wyverns
;.byte $18,%00000001, $53,$FF,$FF,$FF, $13,$00,$00,$00,$28,$28,$04,$00, $14,$00  ; F0 ; 1-4 Wyverns
;.byte $17,%00000011, $4E,$FF,$FF,$FF, $11,$00,$00,$00,$1C,$1C,$04,$00, $12,$00  ; 71 ;   1 Ankylo
;.byte $17,%00000011, $4E,$FF,$FF,$FF, $11,$00,$00,$00,$1C,$1C,$04,$00, $12,$00  ; F1 ; 1-2 Ankylo
;.byte $03,%00000000, $20,$FF,$FF,$FF, $24,$00,$00,$00,$13,$13,$04,$00, $36,$00  ; 72 ; 2-4 Sea Snakes
;.byte $03,%00000000, $20,$FF,$FF,$FF, $24,$00,$00,$00,$13,$13,$04,$00, $36,$00  ; F2 ; 3-6 Sea Snakes
;.byte $3D,%00000001, $78,$77,$FF,$FF, $11,$00,$00,$00,$36,$37,$04,$01, $00,$11  ; 73 ;     Lich 2
;.byte $3D,%00000001, $78,$77,$FF,$FF, $11,$00,$00,$00,$36,$37,$04,$01, $00,$11  ; F3 ;     Lich 1
;.byte $3D,%00000000, $7A,$79,$FF,$FF, $11,$00,$00,$00,$38,$39,$04,$01, $00,$11  ; 74 ;     Kary 2
;.byte $3D,%00000000, $7A,$79,$FF,$FF, $11,$00,$00,$00,$38,$39,$04,$01, $00,$11  ; F4 ;     Kary 1
;.byte $3E,%00000010, $7C,$7B,$FF,$FF, $11,$00,$00,$00,$3A,$3B,$04,$01, $00,$11  ; 75 ;     Kraken 2
;.byte $3E,%00000010, $7C,$7B,$FF,$FF, $11,$00,$00,$00,$3A,$3B,$04,$01, $00,$11  ; F5 ;     Kraken 1
;.byte $3E,%00000011, $7E,$7D,$FF,$FF, $11,$00,$00,$00,$3C,$3D,$04,$01, $00,$11  ; 76 ;     Tiamat 2
;.byte $3E,%00000011, $7E,$7D,$FF,$FF, $11,$00,$00,$00,$3C,$3D,$04,$01, $00,$11  ; F6 ;     Tiamat 1
;.byte $00,%00000000, $00,$FF,$FF,$FF, $00,$00,$00,$00,$00,$00,$00,$00, $00,$00  ; 77 ;
;.byte $00,%00000000, $00,$FF,$FF,$FF, $00,$00,$00,$00,$00,$00,$00,$00, $00,$00  ; F7 ;
;.byte $00,%00000000, $00,$FF,$FF,$FF, $00,$00,$00,$00,$00,$00,$00,$00, $00,$00  ; 78 ;
;.byte $00,%00000000, $00,$FF,$FF,$FF, $00,$00,$00,$00,$00,$00,$00,$00, $00,$00  ; F8 ;
;.byte $5B,%00001110, $69,$FF,$FF,$FF, $11,$00,$00,$00,$13,$2E,$04,$41, $00,$00  ; 79 ;     Garland
;.byte $5B,%00001110, $69,$FF,$FF,$FF, $11,$00,$00,$00,$13,$2E,$04,$41, $00,$00  ; F9 ;
;.byte $61,%00100000, $0F,$FF,$FF,$FF, $99,$00,$00,$00,$08,$0B,$04,$A1, $00,$00  ; 7A ;   9 Pirates
;.byte $61,%00100000, $0F,$FF,$FF,$FF, $99,$00,$00,$00,$08,$0B,$04,$A1, $00,$00  ; FA ;
;.byte $4F,%00000100, $7F,$FF,$FF,$FF, $11,$00,$00,$00,$3E,$3F,$04,$01, $00,$00  ; 7B ;     Chaos
;.byte $4F,%00000100, $7F,$FF,$FF,$FF, $11,$00,$00,$00,$3E,$3F,$04,$01, $00,$00  ; FB ;
;.byte $56,%00000000, $3C,$FF,$FF,$FF, $11,$00,$00,$00,$1F,$1F,$04,$01, $00,$00  ; 7C ;     Vampire
;.byte $56,%00000000, $3C,$FF,$FF,$FF, $11,$00,$00,$00,$1F,$1F,$04,$01, $00,$00  ; FC ;
;.byte $5C,%00000010, $71,$FF,$FF,$FF, $11,$00,$00,$00,$06,$06,$04,$01, $00,$00  ; 7D ;     Astos
;.byte $5C,%00000010, $71,$FF,$FF,$FF, $11,$00,$00,$00,$06,$06,$04,$01, $00,$00  ; FD ;
;.byte $01,%00100000, $0E,$0D,$FF,$FF, $00,$00,$00,$00,$08,$0B,$04,$A1, $12,$88  ; 7E ;
;.byte $01,%00100000, $0E,$0D,$FF,$FF, $00,$00,$00,$00,$08,$0B,$04,$A1, $12,$88  ; FE ; 1-2 WzSahag     8-8 R.Sahag
;.byte $2B,%00001110, $00,$6E,$FF,$FF, $11,$00,$00,$00,$13,$2E,$04,$41, $00,$12  ; 7F ;
;.byte $2B,%00001110, $00,$6E,$FF,$FF, $11,$00,$00,$00,$13,$2E,$04,$41, $00,$12  ; FF ;                 1-2 IronGol



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  Draw Battle Backdrop Row  [$F385 :: 0x3F395]
;;
;;    Draws one row of NT data for the battle backdrop.  Does not
;;  do any attribute updates.
;;
;;  IN:  A = low byte of target PPU Addr
;;       Y = tile additive (added to each drawn tile)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

DrawBattleBackdropRow:
    STY tmp              ; record tile additive for future use
    LDX #$20
    JSR SetPPUAddr_XA    ; set PPU address to $20nn where A=nn

  @Section:
    LDX #0
    LDY #32
   @Loop:
      LDA lut_BackdropLayout, X    ; get the tile to draw in this column
      CLC
      ADC tmp                      ; add to that our additive (to draw the right row)
      STA $2007                    ; draw the tile
      INX                          ; inc our loop counter
      DEY
      BNE @Loop
    RTS


FillMessageNTWith_F6:
    LDA #$F6
    LDY #10                    ; 10 tiles from the message box starting area
  @ClearMessageNT_OuterLoop:
      LDX #$20                 ; and $20 tiles across
   @ClearMessageNT_InnerLoop:
      STA $2007
      DEX
      BNE @ClearMessageNT_InnerLoop
    DEY
    BNE @ClearMessageNT_OuterLoop
	RTS
    

BeginBattleSetup:
    LDA #BANK_THIS
    STA battle_bank

    LDA #0                    ; reset all battle variables to 0
    TAX                       ; this is where map tileset data is kept in dungeons and such
  : STA $0400, X              ; but it re-loads after battle... so why not use it here
    STA $0500, X
    STA $0600, X
    STA $0700, X
    INX
    BNE :-

    STA menustall             ; disable menu stalling
    STA soft2000              ; clear soft2000
    STA $2000                 ; disable NMIs

;; load player HP strings into RAM
    LDX #$20
  : LDA PlayerHPString_ROM, X
    STA PlayerHPString_RAM, X
    DEX
    BPL :-

    JSR JigsBox_Start         ; clear box buffers and draw empty boxes to RAM
    
;; set up nametable stuff    
    
    LDX #>$2000
    LDA #<$2000
    JSR SetPPUAddr_XA         ; set PPU address to $2000 (start of nametable)

    LDA #$FF
    LDY #8                    ; loops to clear $0800 bytes of NT data (both nametables)
  @ClearNT_OuterLoop:
      LDX #0
   @ClearNT_InnerLoop:        ; inner loop clears $100 bytes
      STA $2007
      DEX
      BNE @ClearNT_InnerLoop
    DEY                     ; outer loop runs inner loop 8 times
    BNE @ClearNT_OuterLoop  ;  clearing $800 bytes total

    LDX #>$2280
    LDA #<$2280               ; now fill the lower half, where messaages are, with $F6
    JSR SetPPUAddr_XA         ; which should be a blank sprite
    JSR FillMessageNTWith_F6

	LDX #>$2680
    LDA #<$2680               ; and again for the other side
    JSR SetPPUAddr_XA
    JSR FillMessageNTWith_F6

  ;; Draw Attribute Table

    LDX #>$23C0
    LDA #<$23C0
    JSR SetPPUAddr_XA     ; set PPU Address to $23C0 (start of attribute table)
    LDX #$28
  @AttrLoop:
      LDA lut_BtlAttrTbl-1, X   ; copy over attribute bytes
      STA $2007
      DEX
      BNE @AttrLoop           ; loop until all $28 bytes copied

    LDX #$18
    LDA #$FF
   @AttrLoop_2:
      STA $2007
      DEX
      BNE @AttrLoop_2         ; the last 3 rows of the nametable are $FF
    
    JSR LoadBorderPalette_Grey

;; load the battle text and sprites
    LDA $2002
    LDA #>$0F00
    STA $2006
    LDA #<$0F00
    STA $2006
    LDA #>BattleTextChr
    STA tmp+1
    LDA #<BattleTextChr
    STA tmp
    LDX #1
    JSR CHRLoad

    LDA #>$1300
    STA $2006
    LDA #<$1300
    STA $2006
    LDA #>BattleTextChr_Sprites
    STA tmp+1
    LDA #<BattleTextChr_Sprites
    STA tmp
    LDX #13
    JSR CHRLoad

;; randomize the battle backdrop

    LDY #$0
    STY tmp
    STY tmp+1

   @RandomBackDrop:
    JSR BattleRNG_L
    AND #$03
    ;BEQ @Random        ; if its 0, reroll
    ;CMP #3
    ;BEQ @Print3        ; if its 3, do 3
    ;CMP #1
    ;BEQ @Print1        ; if its 1, do 1
    ;BNE @Random        ; else, its 2; reroll
    CMP #$02
    BCC @PrintBackDrop3

   @PrintBackDrop1:
    LDA #0               ; clear the "drawn 3" counter
    STA tmp+1
    INC tmp              ; inc the "drawn 1" counter
    LDA tmp   
    CMP #4               ; when it reaches 4, switch to drawing 3 instead
    BEQ @PrintBackDrop3  ; after clearing the "drawn 1" counter
    ;; this will ensure that no pillar or tree or whatever is drawn more than 3 times in a row.

    LDA #0
    STA lut_BackdropLayout, Y
    INY
    LDA #1
    STA lut_BackdropLayout, Y
    BNE @NextBackDrop

   @PrintBackDrop3:
    LDA #0
    STA tmp
    INC tmp+1
    LDA tmp+1
    CMP #4
    BEQ @PrintBackDrop1

    LDA #2
    STA lut_BackdropLayout, Y
    INY
    LDA #3
    STA lut_BackdropLayout, Y

   @NextBackDrop:
    INY
    CPY #$20
    BNE @RandomBackDrop

   ;; Draw the battle backdrop

    LDA #<$2020                 ; draw the first row of the backdrop
    LDY #0                      ;  to $2020
    JSR DrawBattleBackdropRow
    LDA #<$2040                 ; then at $2040
    LDY #4                      ;   draw the next row
    JSR DrawBattleBackdropRow
    LDA #<$2060                 ; 
    LDY #8
    JSR DrawBattleBackdropRow
    LDA #<$2080                 ; 
    LDY #12
    JSR DrawBattleBackdropRow   ; 4 rows total

    ;; this copies formation data to RAM

    LDA btlformation
    LDX #$0D
    JSR MultiplyXA
    CLC
    ADC #<lut_BattleFormations
    STA tmp                     ; put in tmp as low byte of our pointer
    TXA
    ADC #>lut_BattleFormations  ; add high byte of our pointer
    STA tmp+1                   ; fill tmp+1 to complete our pointer

    LDY #$0D
  @FormationLoop:
      LDA (tmp), Y            ; copy a byte from the LUT in ROM
      STA btl_formdata, Y     ;  to our formation data buffer in RAM
      DEY                     ; dec loop counter
      BPL @FormationLoop      ; and loop until all $10 bytes copied

  ;; Load palettes

    LDX #$20
  @PalLoop:                   ; copy the loaded palettes (backdrop, menu, sprites)
      LDA cur_pal-1, X        ;  to the battle palette buffer
      STA btl_palettes-1, X
      DEX
      BPL @PalLoop            ; all $20 bytes

    LDA btlform_plts          ; use the formation data to get the ID of the palettes to load
    LDY #4                    ;   load the first one into the 2nd palette slot ($xxx4)
    JSR LoadBattlePalette
    LDA btlform_plts+1        ;   and the second one into the 3rd slot ($xxx8)
    LDY #8
    JSR LoadBattlePalette

    ;; continue into...

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  PrepareEnemyFormation [$A12A :: 0x2E13A]
;;
;;    This routine will take loaded formation data and will generate the appropriate number
;;  of enemies for this battle.  It will also do all the drawing of all the enemies (NT and Attributes).
;;  However, it will not load any enemy stats.  It merely records the IDs of each enemy
;;
;;  input:
;;      btlformation
;;      btl_formdata
;;
;;  output:
;;      btl_battletype
;;      btl_enemyIDs
;;      (PPU drawing of all enemies)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PrepareEnemyFormation:
    ; Start by doing some blanket RAM clearing

    ; zero RAM at $6BB2 to $6C8F
    ; This is basic RAM clearing to prep generation of the battle formation.
    ;   This clears things like number of available slots for each enemy, as well
    ;   as enemy stats.
    ;; JIGS - only clears a little bit now, enemy stat loading does its own clearing

    LDA #$00
    LDY #$17
    : STA btl_enemyroster, Y ; btl_smallslots
      DEY
      BPL :-
      
    STA btl_enemycount      ; clear enemy count  

    LDA #$FF
    LDX #$09   
    : STA btl_enemyIDs, X
      DEX
      BPL :-

    LDA btlformation_battletype
    AND #$07
    STA btl_battletype
    STA dlgmusic_backup
    AND #$03
    
    BEQ @9Small
    CMP #01
    BEQ @4Large
    CMP #02
    BEQ @Mix
   
   @BigBoss:
    JMP PrepareEnemyFormation_FiendChaos  ; prepare the 'Fiend'/'Chaos' enemy formation
   
   @Mix:
    JMP PrepareEnemyFormation_Mix    ; type=2    : prepare the 'Mix' enemy formation

   @4Large:
    JMP PrepareEnemyFormation_Large  ; type=0,1  : prepare the '9Small' or '4Large' enemy formation
   
   @9Small:

PrepareEnemyFormation_Small:
    LDA #$09
    STA btl_smallslots
    LDA #$00
    STA btl_largeslots    
    BEQ :+
    
PrepareEnemyFormation_Large:
    LDA #$00
    STA btl_smallslots
    LDA #$04
    STA btl_largeslots    
    BNE :+

PrepareEnemyFormation_Mix:
    LDA #$06
    STA btl_smallslots
    LDA #$02
    STA btl_largeslots    
    
  : LDX #0
    STX tmp+10
   @Generate_Loop:
    LDA btlformation_en_id, X
    CMP #$FF
    BEQ @Next
    
    JSR GenerateEnemy
    
   @Next:
    INC tmp+10
    LDX tmp+10
    CPX #4
    BNE @Generate_Loop
    
DrawFormation_NonFiend:
    LDA btlformation_battletype    ; get the battle type
    AND #$03
    BEQ DrawFormation_9Small
    CMP #2
    BEQ DrawFormation_Mix
    ;; else its 1, so flow into...

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  DrawFormation_9Small  [$A44C :: 0x2E45C]
;;
;;  Draws NT and Attributes for the enemies for the "9 small" formation type
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

DrawFormation_4Large:
    LDX #>lut_FormationAttributes_4Large
    LDA #<lut_FormationAttributes_4Large
    JSR BattleFormation_DrawAttributes

    LDX #>lut_FormationPlacement_4Large
    LDA #<lut_FormationPlacement_4Large
    JMP BattleFormation_DrawEnemies

DrawFormation_9Small:
    LDX #>lut_FormationAttributes_9Small
    LDA #<lut_FormationAttributes_9Small
    JSR BattleFormation_DrawAttributes

    LDX #>lut_FormationPlacement_9Small
    LDA #<lut_FormationPlacement_9Small
    JMP BattleFormation_DrawEnemies

DrawFormation_Mix:
    LDX #>lut_FormationAttributes_Mix
    LDA #<lut_FormationAttributes_Mix
    JSR BattleFormation_DrawAttributes

    LDX #>lut_FormationPlacement_Mix
    LDA #<lut_FormationPlacement_Mix

BattleFormation_DrawEnemies:
    ; in:  XA should point to the FormationPlacement lut

    STA tmp+4
    STX tmp+5
    LDX #0
    STX tmp+2

    @Loop:
        LDA tmp+2
        TAX                 ; 1x index in X
        ASL A
        TAY                 ; 2x index in Y

        LDA (tmp+4),Y     ; get the PPU address where this enemy should be drawn
        STA tmp
        INY
        LDA (tmp+4),Y     ; if high byte is zero, that's the terminator, nothing left to draw
        BEQ @Exit           ;  This is where we escape the loop
        PHP                 ; back up N flag here (used to determine small/large enemy)
        AND #$7F            ; kill N flag bit
        STA tmp+1

        ; Does this enemy even exist?
        LDA btl_enemyIDs, X
        CMP #$FF
        BNE :+              ; If not, don't draw him.  Continue looping
            PLA             ; drop backed up status
            BNE @Next       ; will always branch (PHP never pushes zero)
        :

        LDA btlformation_battletype
        AND #$03                  ; cut out "boss" bit
        ASL A
        TAY
        LDA EnemyCHRAddress_LUT, Y
        STA tmp+12
        LDA EnemyCHRAddress_LUT+1, Y
        STA tmp+13

        INX
        TXA               ; X = enemy index position+1
        ASL A
        TAY
        DEY
        LDA (tmp+12), Y
        STA tmp+10
        DEY
        LDA (tmp+12), Y
        STA tmp+11

        ROR tmp+10        ; shift middle nybbles into one to get tile index
        ROR A             ; for the start of the enemy's graphic
        ROR tmp+10        ; so if its $0340, it becomes $34
        ROR A
        ROR tmp+10
        ROR A
        ROR tmp+10
        ROR A        
        STA tmp+11
        
        LDY #4            ; if small enemy, draw 4 tiles across and 4 rows
        
        PLP               ; restore backed up N flag
        BPL :+
       
       @DoLarge:
        LDY #6            ; if large enemy do 6
      : STY tmp+10        ; tiles across
        STY tmp+3         ; rows down
        JSR DrawEnemy 

      @Next:
        INC tmp+2
        BNE @Loop
  @Exit:
    JSR WriteAttributesToPPU
    JMP FinishBattlePrep


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  PrepareEnemyFormation_FiendChaos  [$A26E :: 0x2E27E]
;;
;;    PrepareEnemyFormation, but specifically geared for the 'Fiend' and 'Chaos'
;;  formation types
;;
;;  input:
;;     A = 3 if using the Fiend formation type
;;     A = 4 if using the Chaos formation type
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PrepareEnemyFormation_FiendChaos:
    JSR ReadAttributesFromPPU   ; Read the Attributes into btltmp_attr

    LDA btl_battletype
    CMP #$07
    BNE PrepareEnemyFormation_Fiend
    JMP PrepareEnemyFormation_Chaos

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  PrepareEnemyFormation_Fiend  [$A275 :: 0x2E285]
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PrepareEnemyFormation_Fiend:
    LDA btlformation_plt_assign ; get the assigned graphic for this formation
    ASL A                       ; x2 to use as index for lut_FiendTSAPtrs
    TAX

    LDA lut_FiendTSAPtrs, X     ; source TSA data in btltmp+4
    STA tmp+4
    LDA lut_FiendTSAPtrs+1, X
    STA tmp+5

    LDA #<$2104                 ; dst PPU address ($2104) in btltmp+6
    STA tmp   ;+6
    LDA #>$2104
    STA tmp+1 ;+7

    LDA #BANK_THIS              ; source bank (this bank)
    STA tmp+9

    LDA #$08                    ; do 8 tiles per row + 8 rows
    STA tmp+10
    BNE :+ 

PrepareEnemyFormation_Chaos:
    LDA #<data_ChaosTSA     ; load source pointer to btltmp+4
    STA tmp+4               ;  source is the Chaos TSA
    LDA #>data_ChaosTSA
    STA tmp+5

    LDA #<$20C2             ; load dest PPU addr to btltmp+6
    STA tmp+6               ;  drawing to $20C2
    LDA #>$20C2
    STA tmp+7

    LDA #$0E                    ; do 14 tiles per row
    STA tmp+10
    LDA #$0C                    ; do 12 rows 
    STA tmp+3                   
    
  : LDA #$10                    ; start with tile ID 10
    STA tmp+11

    JSR DrawEnemy
   
;; then apply the Fiend or Chaos attributes:
   
    LDY #$00        ; loop up-counter
  @Loop:
      LDA FiendChaos_AttOffsetLUT, Y  ; put the attribute offset for this byte in X
      TAX

      LDA (tmp+4), Y
      STA btltmp_attr, X    ; copy the attribute byte over

      INY
      CPY #$10
      BNE @Loop             ; loop until all $10 bytes copied

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  FinalizeEnemyFormation_FiendChaos  [$A31E :: 0x2E32E]
;;
;;    This sets the 1 enemy for this formation (the fiend or chaos), then calls
;;  WriteAttributes_ClearUnusedEnStats to finish up the PrepareEnemyFormation work.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FinalizeEnemyFormation_FiendChaos:
    LDA #$01
    STA btl_enemycount         ; There is exactly 1 enemy for Fiend/Chaos formations
    LDA btlformation_en_id     ; Just use the first enemy ID as the only enemy in this formation
    STA btl_enemyIDs
    STA btl_enemyroster        ; 
    JSR WriteAttributesToPPU
    JMP FinishBattlePrep


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  DrawSmallEnemy  [$A71E :: 0x2E72E]
;;
;;  Draws a small enemy graphic to the given nametable position.
;;  NT updates only, no attributes
;;
;;  input:
;;     btltmp+0,1   = PPU address to draw to
;;     btltmp+2     = zero or nonzero to indicate which small enemy to draw
;;
;;  This routine takes care not to modify A,X, but it DOES modify btltmp+0,1
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

DrawEnemy:
    TXA
    PHA                 ; backup X
    ;JSR WaitForVBlank_L ; wait for VBlank
    ;; why? the screen is off!

    ; See which enemy graphic this tile is using.
    ; Small enemy graphics start at tiles $12 and $22
    LDX tmp+11          ; start at first tile of this enemy's graphic
    ;LDA tmp+10          ; tiles across
    ;STA tmp+3           ; loop counter to draw each row

  @Loop:
    LDA tmp+1
    STA $2006
    LDA tmp
    STA $2006

    LDY tmp+10
   @DrawLoop:
    STX $2007
    INX
    DEY
    BNE @DrawLoop

   @NextRow:     
    LDA #$20            ; simply add $20 to the value stored in btltmp
    CLC
    ADC tmp
    STA tmp
    LDA #$00
    ADC tmp+1
    STA tmp+1

    DEC tmp+3           ; dec loop counter, and keep going until there are no more rows to draw
    BNE @Loop

    ; Restore backed up X before exiting
    PLA
    TAX
    RTS




;;;;;;;;;;;;;;;
;;  Formation attributes need to fill 32 bytes, each byte has 4 regions where the attribute is determined
;;   by a particular enemy.  Each digit/nybble here indicates which enemy determines the palette for each
;;   16x16 attribute block.  IE, a value of 1 means the first enemy (enemy 0's) palette is used.  A value
;;   of 0 means the block is used by background instead and not by any enemy
lut_FormationAttributes_9Small:                 ; "tops" are the odd rows of attributes, "bottoms" are even
    .BYTE $00,$00,$00,$00,$00,$00,$00,$00       ;  it's easier to work this way, sadly
    .BYTE $00,$22,$55,$58,$80,$00,$00,$00
    .BYTE $01,$11,$44,$77,$70,$00,$00,$00
    .BYTE $03,$36,$66,$99,$00,$00,$00,$00
;lut_FormationAttributes_9Small_bottoms:        ; These are the "bottoms"
    .BYTE $00,$22,$55,$58,$80,$00,$00,$00       ;  If you were to interleave these so that they were ordered top1, bottom1, top2, bottom2, top3, bottom3, etc
    .BYTE $01,$11,$44,$77,$70,$00,$00,$00       ;  it would make a lot more sense.  They're structured this way only for ease of indexing.
    .BYTE $01,$11,$44,$77,$70,$00,$00,$00
    .BYTE $03,$36,$66,$99,$00,$00,$00,$00

;    .BYTE $00,$00,$00,$00,$00,$00,$00,$00     ; it would look like this!
;    .BYTE $00,$22,$55,$58,$80,$00,$00,$00
;    .BYTE $00,$22,$55,$58,$80,$00,$00,$00
;    .BYTE $01,$11,$44,$77,$70,$00,$00,$00
;    .BYTE $01,$11,$44,$77,$70,$00,$00,$00
;    .BYTE $01,$11,$44,$77,$70,$00,$00,$00
;    .BYTE $03,$36,$66,$99,$00,$00,$00,$00
;    .BYTE $03,$36,$66,$99,$00,$00,$00,$00


lut_FormationAttributes_4Large:
    .BYTE $00,$00,$00,$00,$00,$00,$00,$00
    .BYTE $01,$11,$13,$33,$00,$00,$00,$00
    .BYTE $02,$22,$44,$44,$00,$00,$00,$00
    .BYTE $02,$22,$44,$44,$00,$00,$00,$00
; bottoms:
    .BYTE $01,$11,$13,$33,$00,$00,$00,$00
    .BYTE $01,$11,$13,$33,$00,$00,$00,$00
    .BYTE $02,$22,$44,$44,$00,$00,$00,$00
    .BYTE $02,$22,$44,$44,$00,$00,$00,$00

;    .BYTE $00,$00,$00,$00,$00,$00,$00,$00
;    .BYTE $01,$11,$13,$33,$00,$00,$00,$00
;    .BYTE $01,$11,$13,$33,$00,$00,$00,$00
;    .BYTE $01,$11,$13,$33,$00,$00,$00,$00
;    .BYTE $02,$22,$44,$44,$00,$00,$00,$00
;    .BYTE $02,$22,$44,$44,$00,$00,$00,$00
;    .BYTE $02,$22,$44,$44,$00,$00,$00,$00
;    .BYTE $02,$22,$44,$44,$00,$00,$00,$00


lut_FormationAttributes_Mix:
    .BYTE $00,$00,$00,$00,$00,$00,$00,$00
    .BYTE $01,$11,$14,$44,$77,$00,$00,$00
    .BYTE $02,$22,$03,$36,$66,$00,$00,$00
    .BYTE $02,$22,$55,$58,$80,$00,$00,$00
; bottoms:
    .BYTE $01,$11,$14,$44,$77,$00,$00,$00
    .BYTE $01,$11,$13,$36,$66,$00,$00,$00
    .BYTE $02,$22,$03,$36,$66,$00,$00,$00
    .BYTE $02,$22,$55,$58,$80,$00,$00,$00

;    .BYTE $00,$00,$00,$00,$00,$00,$00,$00
;    .BYTE $01,$11,$14,$44,$77,$00,$00,$00
;    .BYTE $01,$11,$14,$44,$77,$00,$00,$00
;    .BYTE $01,$11,$13,$36,$66,$00,$00,$00
;    .BYTE $02,$22,$03,$36,$66,$00,$00,$00
;    .BYTE $02,$22,$03,$36,$66,$00,$00,$00
;    .BYTE $02,$22,$55,$58,$80,$00,$00,$00
;    .BYTE $02,$22,$55,$58,$80,$00,$00,$00


lut_FormationPlacement_9Small:
  .WORD $2163, $20C4, $2202     ; Left column of enemies
  .WORD $2168, $20C9, $2207     ; Center column
  .WORD $216D, $20CE, $220C     ; right column
  .WORD 0                       ; terminator

lut_FormationPlacement_4Large:  ; note high bit set for large enemies
  .WORD $A0C3, $A1A2
  .WORD $A0CA, $A1A9
  .WORD 0                       ; terminator

lut_FormationPlacement_Mix:
  .WORD $A0C3, $A1A2
  .WORD $216A, $20CB, $2209     ; Center column
  .WORD $216F, $20D0, $220E     ; right column
  .WORD 0                       ; terminator

BattleFormation_PrepAttributeLutsToXA:
    ; in:   XA = pointer to FormationAttributesTable (ie:  FormationAttributes_9Small)
    ; out:  btltmp+2 through btltmp+5 set appropriately for BattleFormation_GetAttributeByte
    STA tmp+2
    STX tmp+3
    CLC
    ADC #8*4 ;$20
    STA tmp+4
    TXA
    ADC #0
    STA tmp+5
    RTS

BattleFormation_GetAttributeByte:
    ; in:   Y = index of attribute byte to get
    ;       btltmp+2, btltmp+3 = should point to "tops" FormationAttributes table
    ;       btltmp+4, btltmp+5 = should point to "bottoms" FormationaAttributes table
    ; out:  A = attribute byte
    LDA (tmp+4),Y        ; load the "bottoms"
    JSR BattleFormation_GetAttributeNybble
    ASL A
    ASL A
    ASL A
    ASL A
    STA tmp+15
    LDA (tmp+2),Y        ; load the "tops"
    JSR BattleFormation_GetAttributeNybble
    ORA tmp+15
    RTS


;; JIGS - so this worked originally by getting a byte from the lut_FormationAttributes things, 
;; using the number to get the enemy ID, then getting the palette assignment byte...
;; which was either 0 or 1. Then adding 1, to make each 2 bits be either "0101" (5) to use the second palette
;; or "1010" (A) to use the third palette.

;; so to make this work with my new battle formation stuff... I don't need to do that, as the bits are already set

BattleFormation_GetAttributeNybble:
    ; in:   A = formation lut byte
    ; out:  A = nybble
    ;   (trashes btltmp+0 and X)

    PHA         ; back up src byte

    AND #$0F    ; get the low nybble (right / high nybble of output)
    BEQ @next   ; if it's zero, it's not an enemy.  Leave it with attribute 0
        ; otherwise, it's an enemy index (plus one), so get the palette assignment
        TAX
        LDA btl_enemygfxplt-1, X
        AND #3     ; 00 = palette 0 (backdrop pal); 01 = palette 1; 10 = palette 2 ;11 = stoned
        ;CLC        ;; JIGS - this used to be AND #1... with palettes being 0 or 1
        ;ADC #1
        ASL A
        ASL A

  @next:
    STA tmp+14  ; store high half-nybble of dst byte
    PLA         ; get high nybble of src byte
    LSR A
    LSR A
    LSR A
    LSR A
    BEQ @done   ; if it's zero, there's no enemy
        TAX
        LDA btl_enemygfxplt-1, X
        AND #3    ; 00 = palette 0 (backdrop pal); 01 = palette 1; 10 = palette 2 ;11 = stoned
        ;CLC
        ;ADC #1
        ORA tmp+14
        STA tmp+14

  @done:
    LDA tmp+14
    RTS

BattleFormation_DrawAttributes:
    ; in:  XA should point to the formation attributes lut (see BattleFormation_PrepAttributeLutsToXA)
    PHA
    TXA
    PHA
    JSR ReadAttributesFromPPU
    PLA
    TAX
    PLA
    JSR BattleFormation_PrepAttributeLutsToXA
    LDY #(8*4)-1
   @loop:
        TYA
        AND #7              ; skip the 2 right-most attribute columns.
        CMP #5              ;   this is kind of hacky, but whatever
        BCS @continue
            JSR BattleFormation_GetAttributeByte
            STA btltmp_attr+8, Y
      @continue:
        DEY
        BPL @loop
    RTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  ReadAttributesFromPPU [$A6EB :: 0x2E6FB]
;;
;;  Reads the attribute table from PPU memory
;;  Stores it in btltmp_attr
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

ReadAttributesFromPPU:
    JSR SharedAttributeThings
    JMP Battle_ReadPPUData_L    ; do the reading, and exit

SharedAttributeThings:
    LDA #<btltmp_attr       ; set dest pointer to btltmp_attr
    STA tmp+4
    LDA #>btltmp_attr
    STA tmp+5

    LDA #<$23C0             ; set src pointer to attribute table
    STA tmp+6
    LDA #>$23C0
    STA tmp+7

    LDA #$40                ; read $40 bytes
    STA tmp+8
    RTS
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  Battle_WritePPUData  [$F23E :: 0x3F24E]
;;
;;    Copies a block of data to PPU memory.  Note that no more than 256 bytes can be copied at a time
;;  with this routine
;;
;;  input:
;;     tmp+4,5 = pointer to get data from
;;     tmp+6,7 = the PPU address to write to
;;     tmp+8   = the number of bytes to write
;;     tmp+9   = the bank to swap in
;;
;;  This routine will swap back to the battle_bank prior to exiting
;;  It will also reset the scroll.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Battle_WritePPUData_BankB:
    JSR WaitForVBlank_L

    LDA tmp+7
    STA $2006
    LDA tmp+6
    STA $2006

    LDY #$00                    ; Y is loop up-counter
    LDX tmp+8                   ; X is loop down-counter

  @Loop:
      LDA (tmp+4), Y            ; copy source data to PPU
      STA $2007 
      INY
      DEX
      BNE @Loop

    RTS


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  WriteAttributesToPPU [$A702 :: 0x2E712]
;;
;;  Reads the data from btltmp_attr
;;  Write to the attribute table in PPU memory
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

WriteAttributesToPPU:
    JSR SharedAttributeThings
    JSR Battle_WritePPUData_BankB
    LDA cur_bank
    CMP #$0C
    BEQ :+
    
TurnOffScreen_SetScroll:
    LDA #$00                    ; reset scroll before exiting
    STA $2001
    STA $2005
    STA $2005
  : RTS    


;;  Support routine to generate an enemy group  [A202 :: 0x2E212]
;;
;;  input:
;;      A               = graphic assignment for this group (in high 2 bits:  00,40,80,C0)
;;      btltmp+10       = a pointer to btl_formdata  (why it doesn't just use btl_formdata directly is beyond me
;;      btltmp+2        = 2,3,4, or 5 to indicate which enemy group to generate
;;      btl_tmppltasign = 0 or 1 to indicate palette assignment for this group
;;      btl_enemycount  = number of enemies generated so far
;;      btl_smallslots  = number of available small enemy slots
;;      btl_largeslots  =   "   "             large
;;
;;  output:
;;      btl_enemycount  = updated to reflect changes
;;      btl_smallslots  = updated
;;      btl_largeslots  = updated
;;      btl_enemygfxplt = the graphic and palette assignment for this enemy (graphic in high 2 bits, palette in low bit)
;;      btl_enemyIDs    = the actual ID for this enemy

GenerateEnemy:
    STA tmp+2
    LDA btlformation_en_amount, X
    PHA
    AND #$0F
    TAX                     ; put low 4 bits (max) in X
    PLA                     ; then shift to put min in low bits of A
    LSR A
    LSR A
    LSR A
    LSR A
 
    JSR RandAX              ; with A=min and X=max, get a random number of enemies
    ORA #$00                ; ORA with 0 just to update the Z flag
    BEQ @Exit               ; If there are no enemies, jump ahead to an RTS

    STA tmp                 ; put the number of enemies in 6BD0

   @Loop:
    LDX tmp+10
    LDY btlformation_en_id, X
    LDA lut_EnemyCHR_Assignment, Y
    AND #$C0                ; will be $40 if its a large enemy, $00 if small
    PHA
    BEQ @DecSmall
    
    DEC btl_largeslots
    JMP :+
  
   @DecSmall:
    DEC btl_smallslots     
   
  : LDA btlformation_plt_assign
    ASL A                    ; clear carry, shift first bit into carry
   @ShiftLoop:
    ROL A                    ; shift carry bit into low bit twice
    ROL A                    
    DEX                      ; use X position counter as loop counter 
    BPL @ShiftLoop           ; first is 0, then 1, then 2, then 3...
    
    AND #$03                 ; clear out any other shifted bits
    STA tmp+1                ; save palette
    PLA                      ; pull enemy size ID 
    ORA tmp+1                ; add low palette bits into enemy size ID
    LDX btl_enemycount        
    STA btl_enemygfxplt, X   ; record it for this generated enemy
    LDA tmp+2
    STA btl_enemyIDs, X
    LDA tmp+10
    STA btl_enemyrosterID_temp, X

    INC btl_enemycount      ; increment the generated enemy counter
    DEC tmp                 ; decrement the counter indicating how many of this type of enemy we have to make
    BNE @Loop               ; loop until we've generated all of them

   @Exit:
    RTS




;; Finally, load the graphics from the CHR banks and do last minute battle prep:

FinishBattlePrep:
    LDA btl_enemycount
    STA tmp+3                 ; loop counter
   @LoadGraphicsLoop:
    LDX tmp+3
    LDY btl_enemyIDs-1, X
    CPY #$FF
    BEQ @Next
    LDA lut_EnemyCHR_Assignment, Y
    PHA                       ; push the bank+ enemy CHR ID for later
    AND #$C0
    ASL A                     ; like character indexes, convert 00, 40, 80, C0 to 0, 1, 2, 3
    ROL A
    ROL A
    STA tmp+2                 ; save bank for later, and as enemy size indexer

    LDA btlformation_battletype
    AND #$03                  ; cut out "boss" bit
    ASL A
    TAX
    LDA EnemyCHRAddress_LUT, X
    STA tmp
    LDA EnemyCHRAddress_LUT+1, X
    STA tmp+1

    LDA tmp+3
    ASL A
    TAY          ; decrement by 1, because tmp+3 is +1, and ...
    DEY          ; this lets the table itself be readable! Neat.
    LDA (tmp), Y ; high byte of dest address
    STA $2006
    DEY
    LDA (tmp), Y ; low byte of dest address
    STA $2006

    LDA tmp+2
    ASL A
    ADC tmp+2      ; enemy bank * 3
    TAY
    PLA
    AND #$3F       ; get enemy CHR ID
    PHA
    TAX            ; put in X for multiplication
    LDA EnemyCHR_Size, Y
    CLC            ; clear any carry (there shouldn't be though?)
    JSR MultiplyXA
    BEQ :+         ; Zero flag set if X = 0 
      SEC
  : STA tmp
    PLA
    TAX            ; enemy CHR ID in X again
    INY
    LDA EnemyCHR_Size, Y
    JSR MultiplyXA
    ADC #$00       ; add carry in 
    ORA #$80       ; and high bit to load from start of bank
    STA tmp+1

    INY
    LDX EnemyCHR_Size, Y
    LDA tmp+2
    JSR LoadEnemyGraphicsFromBank  
    
   @Next:
    DEC tmp+3 
    BNE @LoadGraphicsLoop

;; do the rest of the setup...

    LDA #$00
    LDY #$0C
    @miniloop:
     STA $0300, Y
     INY
     CPY #$8A           ;; JIGS - stop at btltmp_smallslotpos, don't want to overwrite those
     BNE @miniloop
     ;; make sure all these are set to 0 prior to battle!

    LDY BattleTextSpeed
    LDA lut_RespondDelay, Y     ; prep respond rate
    STA btl_responddelay

    LDA AutoTargetOption        ; pressing start in the command menu can trigger a temporary auto-battle state
    STA AutoTargetOptionBackup

    LDX dlgmusic_backup
    LDA BattleMusic_LUT, X
    STA music_track             ; set music track and followup
    STA btl_followupmusic
    
    LDA btl_battletype
    AND #$03
    STA btl_battletype          ; don't need the bossfight bit anymore

    INC ch_level
    INC ch_level+$40
    INC ch_level+$80
    INC ch_level+$C0
    ;; turn level to 1-based to make some things easier later

    RTS ;; finally done! Go back to fixed bank, then load up the rest


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  LUT for respond rate delay  [$9A22 :: 0x2DA32]
;;
;;  Translates the 0-based respond rate value as stored in the 'respondrate' variable,
;;      and translates it into a frame delay value
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

lut_RespondDelay:
;    .BYTE   $78, $50, $3C, $2D, $1E, $0F, $05, $01

;; JIGS - making some more options

;  option #: 1    2    3    4    5    6    7    8    9
;  in frames:
;           120,  90,  60,  45,  30,  20,  15,  10,  5
    .BYTE   $78, $5A, $3C, $2D, $1E, $14, $0F, $0A, $05


BattleMusic_LUT:
 .byte $50 ; 9 small - normal battle theme
 .byte $50 ; 4 large - normal battle theme
 .byte $50 ; 2 large, 6 small - normal battle theme
 .byte $59 ; Fiend - Fiend battle remix
 .byte $5A ; 9 small boss battle - Old earth cave music
 .byte $5A ; 4 large boss battle - Old earth cave music
 .byte $5A ; 2/6 mix boss battle - Old earth cave music
 .byte $59 ; Chaos - Fiend battle remix




;; high 2 bits are CHR bank, lower bits are graphic ID
;;
;; 00xx xxxx - First enemy CHR bank
;; 01xx xxxx - Second enemy CHR bank
;; 10xx xxxx - Third enemy CHR bank (boss table)
;; 11xx xxxx - not used


lut_EnemyCHR_Assignment:
.byte $00 ;00 IMP	    
.byte $00 ;01 GrIMP	
.byte $01 ;02 WOLF	    
.byte $01 ;03 GrWolf   
.byte $01 ;04 WrWolf   
.byte $01 ;05 FrWOLF   
.byte $40 ;06 IGUANA   
.byte $40 ;07 AGAMA    
.byte $40 ;08 SAURIA   
.byte $41 ;09 GIANT    
.byte $41 ;0A FrGIANT  
.byte $41 ;0B R`GIANT  
.byte $02 ;0C SAHAG    
.byte $02 ;0D R`SAHAG  
.byte $02 ;0E WzSAHAG  
.byte $03 ;0F PIRATE   
.byte $03 ;10 KYZOKU   
.byte $42 ;11 SHARK    
.byte $42 ;12 GrSHARK  
.byte $43 ;13 OddEYE   
.byte $43 ;14 BigEYE   
.byte $04 ;15 BONE     
.byte $04 ;16 R`BONE   
.byte $05 ;17 CREEP    
.byte $05 ;18 CRAWL    
.byte $44 ;19 HYENA    
.byte $44 ;1A CEREBUS  
.byte $45 ;1B OGRE     
.byte $45 ;1C GrOGRE   
.byte $45 ;1D WzOGRE   
.byte $06 ;1E ASP      
.byte $06 ;1F COBRA    
.byte $06 ;20 SeaSNAKE 
.byte $07 ;21 SCORPION 
.byte $07 ;22 LOBSTER  
.byte $46 ;23 BULL     
.byte $46 ;24 ZomBULL  
.byte $47 ;25 TROLL    
.byte $47 ;26 SeaTROLL 
.byte $08 ;27 SHADOW   
.byte $08 ;28 IMAGE    
.byte $08 ;29 WRAITH   
.byte $08 ;2A GHOST    
.byte $09 ;2B ZOMBIE   
.byte $09 ;2C GHOUL    
.byte $09 ;2D GEIST    
.byte $09 ;2E SPECTER  
.byte $48 ;2F WORM     
.byte $48 ;30 Sand W   
.byte $48 ;31 Grey W   
.byte $49 ;32 EYE      
.byte $49 ;33 PHANTOM  
.byte $0A ;34 MEDUSA   
.byte $0A ;35 GrMEDUSA 
.byte $0B ;36 CATMAN   
.byte $0B ;37 MANCAT   
.byte $4A ;38 PEDE     
.byte $4A ;39 GrPEDE   
.byte $4B ;3A TIGER    
.byte $4B ;3B Saber T  
.byte $0C ;3C VAMPIRE  
.byte $0C ;3D WzVAMP   
.byte $0D ;3E GARGOYLE 
.byte $0D ;3F R`GOYLE  
.byte $4C ;40 EARTH    
.byte $4C ;41 FIRE     
.byte $4D ;42 Frost D  
.byte $4D ;43 Red D    
.byte $4D ;44 ZombieD  
.byte $0E ;45 SCUM     
.byte $0E ;46 MUCK     
.byte $0E ;47 OOZE     
.byte $0E ;48 SLIME    
.byte $0F ;49 SPIDER   
.byte $0F ;4A ARACHNID 
.byte $4E ;4B MANTICOR 
.byte $4E ;4C SPHINX   
.byte $4F ;4D R`ANKYLO 
.byte $4F ;4E ANKYLO   
.byte $10 ;4F MUMMY    
.byte $10 ;50 WzMUMMY  
.byte $11 ;51 COCTRICE 
.byte $11 ;52 PERILISK 
.byte $50 ;53 WYVERN   
.byte $50 ;54 WYRM     
.byte $51 ;55 TYRO     
.byte $51 ;56 T REX    
.byte $12 ;57 CARIBE   
.byte $12 ;58 R`CARIBE 
.byte $13 ;59 GATOR    
.byte $13 ;5A FrGATOR  
.byte $52 ;5B OCHO     
.byte $52 ;5C NAOCHO   
.byte $53 ;5D HYDRA    
.byte $53 ;5E R`HYDRA  
.byte $14 ;5F GAURD    
.byte $14 ;60 SENTRY   
.byte $15 ;61 WATER    
.byte $15 ;62 AIR      
.byte $54 ;63 NAGA     
.byte $54 ;64 GrNAGA   
.byte $55 ;65 CHIMERA  
.byte $55 ;66 JIMERA   
.byte $16 ;67 WIZARD   
.byte $16 ;68 SORCERER 
.byte $17 ;69 GARLAND  
.byte $56 ;6A Gas D    
.byte $56 ;6B Blue D   
.byte $57 ;6C MudGOL   
.byte $57 ;6D RockGOL  
.byte $57 ;6E IronGOL  
.byte $18 ;6F BADMAN   
.byte $18 ;70 EVILMAN  
.byte $19 ;71 ASTOS    
.byte $19 ;72 MAGE     
.byte $19 ;73 FIGHTER  
.byte $58 ;74 MADPONY  
.byte $58 ;75 NITEMARE 
.byte $59 ;76 WarMECH  
.byte $80 ;77 LICH     
.byte $80 ;78 LICH 2   
.byte $81 ;79 KARY     
.byte $81 ;7A KARY 2   
.byte $82 ;7B KRAKEN   
.byte $82 ;7C KRAKEN 2 
.byte $83 ;7D TIAMAT   
.byte $83 ;7E TIAMAT 2 
.byte $84 ;7F CHAOS    

EnemyCHRAddress_LUT:
  .word EnemyCHRAddress_Small
  .word EnemyCHRAddress_Large
  .word EnemyCHRAddress_Mix
  .word EnemyCHRAddress_Boss

; first byte is low byte for size ID offset thingy words
; second byte is high byte
; third byte is how many rows CHRLoad needs to draw

EnemyCHR_Size:
  .byte $00,$01,$01 ; small enemy
  .byte $40,$02,$03 ; large enemy
  .byte $40,$03,$07 ; boss

EnemyCHRAddress_Boss:
EnemyCHRAddress_Small:
  .word $0100
  .word $0200
  .word $0300
  .word $0400
  .word $0500
  .word $0600
  .word $0700
  .word $0800
  .word $0900    

EnemyCHRAddress_Large:
  .word $0100
  .word $0340
  .word $0580
  .word $0820
  
EnemyCHRAddress_Mix:
  .word $0300 ; large
  .word $0540 ; large
  .word $0100 ; small
  .word $0200 ; small
  .word $0300 ; small
  .word $0400 ; small
  .word $0500 ; small
  .word $0600 ; small



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Fiend TSA data  [$92E0 :: 0x2D2F0]
;;
;;    $50 bytes of TSA for all 4 fiend graphics (resulting in $140 bytes of data total)
;;      $40 bytes of NT TSA (8x8 image)
;;      $10 bytes of attributes  (4x4)

lut_FiendTSAPtrs:
  .WORD data_FiendTSA
  .WORD data_FiendTSA + $10
  .WORD data_FiendTSA + $20
  .WORD data_FiendTSA + $30

data_FiendTSA:
.byte $30,$00,$00,$00
.byte $33,$99,$65,$00 ; Kary attributes
.byte $33,$55,$55,$00
.byte $F3,$F0,$F0,$F0

.byte $30,$00,$00,$00
.byte $33,$44,$56,$00 ; Lich attributes
.byte $33,$44,$55,$00
.byte $F3,$F0,$F0,$F0

.byte $30,$00,$00,$00
.byte $33,$AA,$AA,$00 ; Kraken attributes?
.byte $33,$55,$59,$00
.byte $F3,$F0,$F0,$F0

.byte $30,$00,$00,$00
.byte $33,$59,$AA,$00 ; Tiamat attributes?
.byte $33,$55,$99,$00
.byte $F3,$F0,$F0,$F0

FiendChaos_AttOffsetLUT:
    .BYTE $08, $09, $0A, $0B
    .BYTE $10, $11, $12, $13
    .BYTE $18, $19, $1A, $1B
    .BYTE $20, $21, $22, $23


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Fiend TSA data  [$9420 :: 0x2D430]
;;
;;    $C0 bytes of TSA for chaos
;;      $A8 bytes of NT TSA (14x12 image)
;;      $10 bytes of attributes  (4x4)
;;      $08 bytes of padding
data_ChaosTSA:

;.byte $00,$00,$00,$12,$13,$00,$14,$15,$16,$17,$00,$00,$00,$00
;.byte $00,$00,$18,$19,$1A,$1B,$1C,$1D,$1E,$1F,$20,$00,$00,$00
;.byte $00,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2A,$2B,$00,$00
;.byte $00,$2C,$2D,$2E,$2F,$30,$31,$32,$33,$34,$35,$36,$37,$00
;.byte $38,$39,$3A,$3B,$3C,$3D,$3E,$3F,$40,$41,$42,$43,$44,$00
;.byte $45,$46,$00,$47,$48,$49,$4A,$4B,$4C,$4D,$4E,$4F,$50,$51
;.byte $52,$00,$00,$00,$53,$54,$55,$56,$57,$58,$00,$00,$00,$59
;.byte $00,$00,$00,$00,$5A,$5B,$5C,$5D,$5E,$5F,$60,$00,$00,$00
;.byte $00,$00,$00,$00,$61,$62,$63,$00,$64,$65,$66,$00,$00,$00
;.byte $00,$00,$00,$67,$68,$69,$6A,$6B,$6C,$6D,$6E,$00,$00,$00
;.byte $00,$00,$00,$6F,$70,$71,$00,$00,$00,$72,$73,$00,$00,$00
;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$75,$00,$00,$00

.byte $A0,$A0,$90,$A0
.byte $BB,$AA,$AA,$AA ; attributes
.byte $77,$55,$56,$55
.byte $F7,$F5,$F5,$F5

;; padding
;.byte $00,$00,$00,$00
;.byte $00,$00,$00,$00























;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  Battle Screen Attribute table LUT  [$F400 :: 0x3F410]
;;
;;    A copy of the attribute table for the battle screen.  This is
;;  further modified to set enemy attributes appropriately, but this is
;;  the base for it.
;;
;;    This LUT is copied in full to the attribute table.


lut_BtlAttrTbl:
;  .BYTE $00,$00,$00,$00,$00,$00,$00,$00
;  .BYTE $00,$00,$00,$00,$00,$00,$F0,$F0
;  .BYTE $00,$00,$00,$00,$00,$00,$FF,$FF
;  .BYTE $00,$00,$00,$00,$00,$00,$FF,$FF
;  .BYTE $00,$00,$00,$00,$00,$00,$FF,$FF
;  .BYTE $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
;  .BYTE $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
;  .BYTE $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF

  ;; JIGS - this table better fits the new layout!
  ;; But lets reverse it for loading with less bytes.
  ;; and the last 3 lines will be done by code.

.BYTE $FF,$FF,$00,$00,$00,$00,$00,$00
.BYTE $FF,$FF,$00,$00,$00,$00,$00,$00
.BYTE $FF,$FF,$00,$00,$00,$00,$00,$00
.BYTE $F0,$F0,$00,$00,$00,$00,$00,$00
.BYTE $00,$00,$00,$00,$00,$00,$00,$00    
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  Load Battle Palette  [$F471 :: 0x3F481]
;;
;;    Loads a single (4-color) battle palette into 'btl_palettes' with the given
;;  offset.
;;
;;  IN:  A = ID of battle palette (as stored in the battle formation data)
;;       Y = offset from which to index btl_palettes
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

LoadBattlePalette:
    ASL A             ; multiply the palette ID by 4 (4 colors per palette)
    ASL A
    TAX               ; throw in X
    LDA #4
    STA tmp+10        ; set the loop down counter

  @Loop:
      LDA lut_BattlePalettes, X   ; get the color from the ROM
      STA btl_palettes, Y         ; write it to our output buffer
      INX             ; inc our indeces
      INY
      DEC tmp+10      ; dec our loop counter
      BNE @Loop       ; and loop until it expires (4 iterations)

    RTS               ; then exit!

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  LUT for Battle Palettes [$8F20 :: 0x30F30]
;;
;;    LUT of 64 4-byte palettes for use with battle formations

lut_BattlePalettes:
  ;.INCBIN "bin/battlepalettes.bin"
;                          ; Enemies that use it: (may not be 100% accurate)
.byte $0F,$36,$27,$16 ; 00 ; Imp, Wolf
.byte $0F,$36,$22,$13 ; 01 ; GrImp, GrWolf, Iguana
.byte $0F,$25,$29,$1B ; 02 ; Giant, WrWolf
.byte $0F,$23,$26,$16 ; 03 ; R.Hydra, R.Giant, Fire, Agama
.byte $0F,$24,$30,$22 ; 04 ; FrWolf, FrGiant, Air
.byte $0F,$26,$2B,$19 ; 05 ; Sauria
.byte $0F,$3A,$16,$1B ; 06 ; Astos
.byte $0F,$30,$31,$22 ; 07 ; Frost D., GrShark, Ghost
.byte $0F,$37,$26,$16 ; 08 ; R. Sahag
.byte $0F,$30,$2B,$1C ; 09 ; BigEye, Shark, Sahag
.byte $0F,$36,$21,$12 ; 0A ; Kyzoku
.byte $0F,$30,$28,$19 ; 0B ; WzSahag, Pirate
.byte $0F,$30,$23,$1B ; 0C ; Bone, Crawl, GrPede
.byte $0F,$37,$25,$16 ; 0D ; Creep, Cerebus, Red D., R. Bone
.byte $0F,$38,$26,$14 ; 0E ; Ogre, Medusa
.byte $0F,$23,$29,$19 ; 0F ; GrMedusa, GrOgre
.byte $0F,$17,$31,$1C ; 10 ; Hyena, WzOgre
.byte $0F,$36,$26,$14 ; 11 ; Cobra, Bull
.byte $0F,$25,$2B,$19 ; 12 ; Asp, Troll
.byte $0F,$30,$2C,$13 ; 13 ; Lobster, Naga, Water, SeaSnake, Garland
.byte $0F,$30,$22,$12 ; 14 ; SeaTroll, Blue D.
.byte $0F,$2B,$26,$16 ; 15 ; Scorpion, Pede
.byte $0F,$16,$2C,$18 ; 16 ; Zombie, ZomBull, Phantom, ZombieD
.byte $0F,$23,$30,$00 ; 17 ; Ghoul, Evilman, Eye
.byte $0F,$30,$28,$1C ; 18 ; Specter, Image
.byte $0F,$30,$2A,$18 ; 19 ; Geist, Wraith, Grey W.
.byte $0F,$32,$1C,$0C ; 1A ; Spider, Shadow, Saber T, Muck
.byte $0F,$37,$27,$13 ; 1B ; Worm
.byte $0F,$16,$37,$18 ; 1C ; Earth, Sand W., Ankylo
.byte $0F,$30,$28,$17 ; 1D ; Tiger, Manticor, Catman
.byte $0F,$25,$2B,$19 ; 1E ; Mancat
.byte $0F,$30,$12,$16 ; 1F ; Gargoyle
.byte $0F,$37,$16,$13 ; 20 ; WzVamp, R. Goyle
.byte $0F,$30,$28,$1A ; 21 ; Scum, Ooze, Gas D.
.byte $0F,$36,$26,$16 ; 22 ; Arachnid, R.Ankylo
.byte $0F,$30,$37,$1A ; 23 ; Sphinx
.byte $0F,$30,$32,$0C ; 24 ; Mage, Badman
.byte $0F,$30,$26,$16 ; 25 ; Mummy, Perelisk
.byte $0F,$30,$27,$12 ; 26 ; Coctrice, WzMummy
.byte $0F,$30,$27,$16 ; 27 ; Wyrm, T-Rex
.byte $0F,$30,$2C,$1C ; 28 ; Wyvern
.byte $0F,$36,$26,$16 ; 29 ; Tyro
.byte $0F,$26,$3C,$1B ; 2A ; Hydra, Caribe
.byte $0F,$25,$2A,$1A ; 2B ; Gator, Ocho
.byte $0F,$1B,$27,$16 ; 2C ; Naocho, R.Caribe
.byte $0F,$37,$32,$00 ; 2D ; FrFator, GrNaga
.byte $0F,$37,$10,$1C ; 2E ; Fighter, Guard, IronGol
.byte $0F,$30,$26,$00 ; 2F ; WarMech
.byte $0F,$17,$38,$18 ; 30 ; Chimera
.byte $0F,$13,$37,$1B ; 31 ; Jimera
.byte $0F,$30,$27,$18 ; 32 ; Madpony, Wizard
.byte $0F,$14,$30,$22 ; 33 ; Sorcerer, Nitemare
.byte $0F,$36,$26,$16 ; 34 ; MudGol
.byte $0F,$36,$10,$00 ; 35 ; RockGol
.byte $0F,$30,$28,$04 ; 36 ; Lich
.byte $0F,$30,$16,$23 ; 37 ; Lich
.byte $0F,$16,$14,$30 ; 38 ; Kary
.byte $0F,$16,$14,$28 ; 39 ; Kary
.byte $0F,$27,$30,$23 ; 3A ; Kraken
.byte $0F,$3B,$13,$23 ; 3B ; Kraken
.byte $0F,$16,$2B,$12 ; 3C ; Tiamat
.byte $0F,$27,$2B,$13 ; 3D ; Tiamat
.byte $0F,$23,$28,$18 ; 3E ; Chaos
.byte $0F,$30,$28,$18 ; 3F ; Chaos





;; Player HP String
PlayerHPString_ROM:
.byte $13,$00,$05,$7A,$13,$00,$06,$01
.byte $13,$40,$05,$7A,$13,$40,$06,$01
.byte $13,$80,$05,$7A,$13,$80,$06,$01
.byte $13,$C0,$05,$7A,$13,$C0,$06,$00


BattleTextChr:
.incbin "chr/battleicons.chr"

BattleTextChr_Sprites:
.incbin "chr/battle_text_sprites.chr"


.byte "END OF BANK 08"